{"version":3,"sources":["components/MainHeader.js","functions/changeWeatherData.js","components/MainPlacesCard.js","components/MainErrorCard.js","components/ForecastHeader.js","components/ForecastNowcard.js","components/ForecastLinecard.js","components/ForecastNext24.js","components/Forecast4dayscard.js","functions/getData.js","pages/Home.js","pages/Forecast.js","pages/NoMatch.js","shared/App.js","client/Root.js","serviceWorker.js","index.js"],"names":["MainHeader","_ref","nowTime","react_default","a","createElement","className","style","color","esm","Provider","value","size","index_esm","WeatherTypeIconWithHours","props","type","timeInMs","Date","now","wi_index_esm","sunrise","sunset","console","log","fa_index_esm","WeatherTypeColorWithHours","bgColor","textColor","shadow","WeatherTypeIconWithForecast","array","findArr","findWeatherType","find","obj","includes","weatherType","undefined","WeatherTypeColorWithForecast","WeatherTypeText","millisecondsToTime","ms","date","hours","getHours","minutes","getMinutes","concat","MainPlacesCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","background","changeWeatherData_WeatherTypeIconWithHours","locationTitle","locationSub","temperature","Component","MainErrorCard","ForecastHeader","address","react_router_dom","exact","to","ForecastNowcard","degree","temp","humidity","windSpeed","windDeg","rain","time","boxShadow","ForecastLinecard","text","forecastReducer","accumulator","index","push","length","ForecastNext24","arr","forecast","next24Info","reduce","changeWeatherData_WeatherTypeIconWithForecast","map","dt_day","dt_hours","toString","ForecastTextloop","tempReducer","Forecast4dayscard","today","forecast_classifi","_loop","i","dayCheck","getDate","filter","forecast_textInfo","forecast_tempInfo","_i","_forecast_classifi","_getForecastNowInfo","asyncToGenerator","regenerator_default","mark","_callee","lat","lon","weatherNow","wrap","_context","prev","next","_getWeatherNow","sent","_getAddr","name","abrupt","_changeWCode","weather","id","Math","floor","main","wind","speed","deg","sys","stop","_x","_x2","apply","arguments","_getDateString","dateText","toLocaleString","substr","_getForecastNext5Info","_ref2","_callee2","weatherNext5","list","_context2","_getWeatherNext5","dt","dt_month","getMonth","_x3","_x4","_getCardLocaInfo","_ref3","_callee3","_context3","_x5","_x6","Error","_ref4","_callee4","_context4","fetch","headers","Authorization","process","then","response","json","documents","address_name","_x7","_x8","_ref5","_callee5","_context5","_x9","_x10","_ref6","_callee6","_context6","_x11","_x12","getNowDate","coords","Home","isLoaded","error","card","cardCount","_this2","navigator","geolocation","getCurrentPosition","position","latitude","longitude","setState","subaddress","toConsumableArray","src_components_MainHeader","listItems","key","MainPlacesCard_MainPlacesCard","cardlist","MainErrorCard_MainErrorCard","textAlign","margin","getWeatherData","nowWeather","nextWeather","year","getFullYear","month","day","minute","Nextday","Forecast","nowcard","match","params","res","forecastcard","src_components_ForecastHeader","src_components_ForecastNowcard","src_components_ForecastLinecard","src_components_ForecastNext24","src_components_Forecast4dayscard","gridArea","NoMatch","App","react_router","path","component","Root","basename","shared_App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","client_Root","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ad85622e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { IconContext } from 'react-icons';\r\nimport { MdLocationOn } from 'react-icons/md';\r\n\r\nimport './MainHeader.scss';\r\n\r\nconst MainHeader = ({ nowTime }) => {\r\n  return (\r\n    <div className='MainHeader' style={{ color: 'white' }}>\r\n      <IconContext.Provider value={{ size: '2em', color: 'white' }}>\r\n        <MdLocationOn />\r\n      </IconContext.Provider>\r\n      <p className='MainHeader_text'>위치</p>\r\n      <p className='MainHeader_time'>{nowTime}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainHeader;\r\n","import React from 'react';\r\n\r\nimport {\r\n  WiThunderstorm,\r\n  WiSleet,\r\n  WiRaindrops,\r\n  WiSnow,\r\n  WiDayHaze,\r\n  WiNightFog,\r\n  WiDaySunny,\r\n  WiNightClear,\r\n  WiCloud\r\n} from 'react-icons/wi';\r\nimport { FaExclamationTriangle } from 'react-icons/fa';\r\n\r\n// 날씨에 맞는 아이콘 내보내기\r\nexport const WeatherTypeIconWithHours = props => {\r\n  const type = props.type;\r\n  const timeInMs = Date.now();\r\n  if (type === 'Thunderstorm') {\r\n    return <WiThunderstorm />;\r\n  } else if (type === 'Drizzle') {\r\n    return <WiSleet />;\r\n  } else if (type === 'Rain') {\r\n    return <WiRaindrops />;\r\n  } else if (type === 'Snow') {\r\n    return <WiSnow />;\r\n  } else if (type === 'Atmosphere') {\r\n    if (timeInMs >= props.sunrise && timeInMs <= props.sunset) {\r\n      return <WiDayHaze />;\r\n    } else {\r\n      return <WiNightFog />;\r\n    }\r\n  } else if (type === 'Clear') {\r\n    if (timeInMs >= props.sunrise && timeInMs <= props.sunset) {\r\n      return <WiDaySunny />;\r\n    } else {\r\n      return <WiNightClear />;\r\n    }\r\n  } else if (type === 'Clouds') {\r\n    return <WiCloud />;\r\n  } else {\r\n    console.log('아이콘 에러인데요??');\r\n    return <FaExclamationTriangle />;\r\n  }\r\n};\r\n\r\n// 날씨에 맞는 카드 및 글씨 색 내보내기\r\nexport const WeatherTypeColorWithHours = (type, sunrise, sunset) => {\r\n  const timeInMs = Date.now();\r\n  if (type === 'Thunderstorm') {\r\n    return {\r\n      bgColor: '#8D23A9',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 0.5px 0.2px #5b0079'\r\n    };\r\n  } else if (type === 'Drizzle') {\r\n    return {\r\n      bgColor: '#7da9ff',\r\n      textColor: '#333',\r\n      shadow: '0 1px 6px #467acb'\r\n    };\r\n  } else if (type === 'Rain') {\r\n    return {\r\n      bgColor: '#457AD1',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 1px 6px #004f9f'\r\n    };\r\n  } else if (type === 'Snow') {\r\n    return {\r\n      bgColor: '#FAFAFC',\r\n      textColor: '#333',\r\n      shadow: '0 1px 6px #c7c7c9'\r\n    };\r\n  } else if (type === 'Atmosphere') {\r\n    return {\r\n      bgColor: '#b9c2d0',\r\n      textColor: '#333',\r\n      shadow: '0 1px 6px #89929f'\r\n    };\r\n  } else if (type === 'Clear') {\r\n    if (timeInMs >= sunrise && timeInMs <= sunset) {\r\n      return {\r\n        bgColor: '#f8bc25',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #c08c00'\r\n      };\r\n    } else {\r\n      return {\r\n        bgColor: '#575d80',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #2c3453'\r\n      };\r\n    }\r\n  } else if (type === 'Clouds') {\r\n    return {\r\n      bgColor: '#89929f',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 1px 6px #5c6471'\r\n    };\r\n  } else {\r\n    console.log('색 변경 에러인데요??');\r\n    return {\r\n      bgColor: '#EE5E5E',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 1px 6px #b62a34'\r\n    };\r\n  }\r\n};\r\n\r\nexport const WeatherTypeIconWithForecast = ({ array }) => {\r\n  const findArr = ['Rain', 'Drizzle', 'Thunderstorm', 'Snow'];\r\n\r\n  const findWeatherType = array.find(obj => {\r\n    return findArr.includes(obj.weatherType);\r\n  });\r\n  if (findWeatherType === undefined) {\r\n    if (array[0].weatherType === 'Atmosphere') {\r\n      return <WiDayHaze />;\r\n    } else if (array[0].weatherType === 'Clear') {\r\n      return <WiDaySunny />;\r\n    } else if (array[0].weatherType === 'Clouds') {\r\n      return <WiCloud />;\r\n    } else {\r\n      console.log('아이콘 에러인데요??');\r\n      return <FaExclamationTriangle />;\r\n    }\r\n  } else {\r\n    if (findWeatherType.weatherType === 'Thunderstorm') {\r\n      return <WiThunderstorm />;\r\n    } else if (findWeatherType.weatherType === 'Drizzle') {\r\n      return <WiSleet />;\r\n    } else if (findWeatherType.weatherType === 'Rain') {\r\n      return <WiRaindrops />;\r\n    } else if (findWeatherType.weatherType === 'Snow') {\r\n      return <WiSnow />;\r\n    } else {\r\n      console.log('아이콘 에러인데요??');\r\n      return <FaExclamationTriangle />;\r\n    }\r\n  }\r\n};\r\n\r\nexport const WeatherTypeColorWithForecast = array => {\r\n  const findArr = ['Rain', 'Drizzle', 'Thunderstorm', 'Snow'];\r\n  const findWeatherType = array.find(obj => {\r\n    return findArr.includes(obj.weatherType);\r\n  });\r\n  if (findWeatherType === undefined) {\r\n    if (array[0].weatherType === 'Atmosphere') {\r\n      return {\r\n        bgColor: '#b9c2d0',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #89929f'\r\n      };\r\n    } else if (array[0].weatherType === 'Clear') {\r\n      return {\r\n        bgColor: '#f8bc25',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #c08c00'\r\n      };\r\n    } else if (array[0].weatherType === 'Clouds') {\r\n      return {\r\n        bgColor: '#89929f',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #5c6471'\r\n      };\r\n    } else {\r\n      console.log('색 변경 에러인데요??');\r\n      return {\r\n        bgColor: '#EE5E5E',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #b62a34'\r\n      };\r\n    }\r\n  } else {\r\n    if (findWeatherType.weatherType === 'Thunderstorm') {\r\n      return {\r\n        bgColor: '#8D23A9',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 0.5px 0.2px #5b0079'\r\n      };\r\n    } else if (findWeatherType.weatherType === 'Drizzle') {\r\n      return {\r\n        bgColor: '#7da9ff',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #467acb'\r\n      };\r\n    } else if (findWeatherType.weatherType === 'Rain') {\r\n      return {\r\n        bgColor: '#457AD1',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #004f9f'\r\n      };\r\n    } else if (findWeatherType.weatherType === 'Snow') {\r\n      return {\r\n        bgColor: '#FAFAFC',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #c7c7c9'\r\n      };\r\n    } else {\r\n      console.log('색 변경 에러인데요??');\r\n      return {\r\n        bgColor: '#EE5E5E',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #b62a34'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// 날씨 텍스트 한글 변경\r\nexport const WeatherTypeText = type => {\r\n  if (type === 'Thunderstorm') {\r\n    return '뇌우';\r\n  } else if (type === 'Drizzle') {\r\n    return '이슬비';\r\n  } else if (type === 'Rain') {\r\n    return '비';\r\n  } else if (type === 'Snow') {\r\n    return '눈';\r\n  } else if (type === 'Atmosphere') {\r\n    return '안개';\r\n  } else if (type === 'Clear') {\r\n    return '맑음';\r\n  } else if (type === 'Clouds') {\r\n    return '흐림';\r\n  } else {\r\n    console.log('날씨 텍스트 에러인데요??');\r\n    return '알수 없음';\r\n  }\r\n};\r\n\r\n// 바람 방향 숫자 -> 한글 변경\r\n// N 348.75 - 11.25\r\n// NNE 11.25 - 33.75\r\n// NE 33.75 - 56.25\r\n// ENE 56.25 - 78.75\r\n// E 78.75 - 101.25\r\n// ESE 101.25 - 123.75\r\n// SE 123.75 - 146.25\r\n// SSE 146.25 - 168.75\r\n// S 168.75 - 191.25\r\n// SSW 191.25 - 213.75\r\n// SW 213.75 - 236.25\r\n// WSW 236.25 - 258.75\r\n// W 258.75 - 281.25\r\n// WNW 281.25 - 303.75\r\n// NW 303.75 - 326.25\r\n// NNW 326.25 - 348.75\r\nexport const WindDegreeToText = degree => {\r\n  if (degree >= 11.25 && degree < 33.75) {\r\n    return '북북동';\r\n  } else if (degree >= 33.75 && degree < 56.25) {\r\n    return '북동';\r\n  } else if (degree >= 56.25 && degree < 78.75) {\r\n    return '동북동';\r\n  } else if (degree >= 78.75 && degree < 101.25) {\r\n    return '동';\r\n  } else if (degree >= 101.25 && degree < 123.75) {\r\n    return '동남동';\r\n  } else if (degree >= 123.75 && degree < 146.25) {\r\n    return '남동';\r\n  } else if (degree >= 146.25 && degree < 168.75) {\r\n    return '남남동';\r\n  } else if (degree >= 168.75 && degree < 191.25) {\r\n    return '남';\r\n  } else if (degree >= 191.25 && degree < 213.75) {\r\n    return '남남서';\r\n  } else if (degree >= 213.75 && degree < 236.25) {\r\n    return '남서';\r\n  } else if (degree >= 236.25 && degree < 258.75) {\r\n    return '서남서';\r\n  } else if (degree >= 258.75 && degree < 281.25) {\r\n    return '서';\r\n  } else if (degree >= 281.25 && degree < 303.75) {\r\n    return '서북서';\r\n  } else if (degree >= 303.75 && degree < 326.25) {\r\n    return '북서';\r\n  } else if (degree >= 326.25 && degree < 348.75) {\r\n    return '북북서';\r\n  } else if ((degree >= 348.75 && degree < 361) || (degree >= 0 && degree < 11.25)) {\r\n    return '북';\r\n  } else {\r\n    console.log('바람 값이 이상한데요?');\r\n    return '-';\r\n  }\r\n};\r\n\r\n// sunrise 및 sunset 시간 변경\r\nexport const millisecondsToTime = ms => {\r\n  const date = new Date(ms);\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  return `${hours < 10 ? `0${hours}` : hours}:${minutes < 10 ? `0${minutes}` : minutes}`;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport { IconContext } from 'react-icons';\r\n\r\nimport {\r\n  WeatherTypeIconWithHours,\r\n  WeatherTypeColorWithHours\r\n} from '../functions/changeWeatherData';\r\n\r\nimport './MainPlacesCard.scss';\r\n\r\n// TODO: constructor 사용시 문제점 확인\r\nexport default class MainPlacesCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = WeatherTypeColorWithHours(props.weatherType, props.sunrise, props.sunset);\r\n  }\r\n\r\n  render() {\r\n    const bgColor = {\r\n      background: this.state.bgColor,\r\n      color: this.state.textColor\r\n    };\r\n    return (\r\n      <div className='place_card' style={bgColor}>\r\n        <div className='place_card_left'>\r\n          <IconContext.Provider value={{ size: '4em' }}>\r\n            <WeatherTypeIconWithHours\r\n              type={this.props.weatherType}\r\n              sunrise={this.props.sunrise}\r\n              sunset={this.props.sunset}\r\n            />\r\n          </IconContext.Provider>\r\n          <p className='location_title'>{this.props.locationTitle}</p>\r\n          <p className='location_sub'>{this.props.locationSub}</p>\r\n        </div>\r\n        <div className='place_card_right'>\r\n          <p className='temperature'>{this.props.temperature}˚</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { IconContext } from 'react-icons';\r\nimport { FaExclamationTriangle } from 'react-icons/fa';\r\n\r\nimport './MainPlacesCard.scss';\r\n\r\nexport default class MainErrorCard extends Component {\r\n  render() {\r\n    return (\r\n      <div className='place_card' style={{ background: '#EE5E5E' }}>\r\n        <div className='place_card_errorIcon'>\r\n          <IconContext.Provider value={{ size: '3.5em', color: '#f1f1f1' }}>\r\n            <FaExclamationTriangle />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='place_card_errorText'>\r\n          <p className='error_title'>현재 위치를 확인할 수 없습니다.</p>\r\n          <p className='error_sub'>위치 정보를 허용해주세요.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdKeyboardBackspace } from 'react-icons/md';\r\n\r\nimport './ForecastHeader.scss';\r\n\r\nconst ForecastHeader = ({ address, nowTime }) => {\r\n  return (\r\n    <div className='ForecastHeader' style={{ color: 'white' }}>\r\n      <NavLink exact to='/'>\r\n        <IconContext.Provider value={{ size: '2em', color: 'white' }}>\r\n          <MdKeyboardBackspace />\r\n        </IconContext.Provider>\r\n      </NavLink>\r\n      <p className='ForecastHeader_text'>{address}</p>\r\n      <p className='ForecastHeader_time'>{nowTime}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastHeader;\r\n","import React from 'react';\r\n\r\n// Icon 설정 파일\r\nimport { IconContext } from 'react-icons';\r\n// 날씨에 맞는 아이콘 가져오기\r\nimport { WiRain, WiHumidity, WiStrongWind, WiSunrise, WiSunset } from 'react-icons/wi';\r\n// 디자인 circle 가져오기\r\nimport { FaCircle } from 'react-icons/fa';\r\n\r\n// 날씨데이터에 따른 데이터 가공 함수 모음\r\nimport {\r\n  WeatherTypeIconWithHours,\r\n  WeatherTypeColorWithHours,\r\n  WeatherTypeText,\r\n  WindDegreeToText,\r\n  millisecondsToTime\r\n} from '../functions/changeWeatherData';\r\n\r\n// css\r\nimport './ForecastNowcard.scss';\r\n\r\nconst ForecastNowcard = ({\r\n  weatherType,\r\n  temp,\r\n  humidity,\r\n  windSpeed,\r\n  windDeg,\r\n  sunrise,\r\n  sunset,\r\n  rain,\r\n  time\r\n}) => {\r\n  const style = WeatherTypeColorWithHours(weatherType, sunrise, sunset);\r\n  const bgColor = {\r\n    background: style.bgColor,\r\n    color: style.textColor\r\n  };\r\n  const shadow = {\r\n    boxShadow: style.shadow\r\n  };\r\n  return (\r\n    <div className='forecast_card_now' style={bgColor}>\r\n      <div className='forecast_card_now_Top' style={shadow}>\r\n        {/* 아이콘 */}\r\n        <div className='forecast_card_now_Top_left'>\r\n          <IconContext.Provider value={{ size: '4em' }}>\r\n            <WeatherTypeIconWithHours type={weatherType} sunrise={sunrise} sunset={sunset} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        {/* 날씨 */}\r\n        <div className='forecast_card_now_Top_center'>\r\n          <p className='timeTitle'>지금</p>\r\n          <p className='weatherTitle'>{WeatherTypeText(weatherType)}</p>\r\n        </div>\r\n        {/* 온도 */}\r\n        <div className='forecast_card_now_Top_right'>\r\n          <p className='temperatureTitle'>{temp}˚</p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_now_Bottom'>\r\n        {/* 비온다면 강수량, 비가 안오면 습도 표시*/}\r\n        {weatherType === 'Rain' || weatherType === 'Drizzle' ? (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiRain />\r\n            </IconContext.Provider>\r\n            <p className='numberText1'>{rain === undefined ? 0 : rain['1h']} mm</p>\r\n            <p className='subText1'>강수량</p>\r\n          </div>\r\n        ) : weatherType === 'Snow' ? (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiHumidity />\r\n            </IconContext.Provider>\r\n            <p className='numberText1'>{humidity} %</p>\r\n            <p className='subText1'>습도</p>\r\n          </div>\r\n        ) : (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiHumidity />\r\n            </IconContext.Provider>\r\n            <p className='numberText1'>{humidity} %</p>\r\n            <p className='subText1'>습도</p>\r\n          </div>\r\n        )}\r\n        <div className='forecast_card_now_Bottom_item'>\r\n          <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n            <WiStrongWind />\r\n          </IconContext.Provider>\r\n          <p className='numberText2'>{windSpeed} m/s</p>\r\n          <p className='subText2'>{WindDegreeToText(windDeg)}</p>\r\n        </div>\r\n        {time >= sunrise && time <= sunset ? (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiSunset />\r\n            </IconContext.Provider>\r\n            <p className='numberText3'>{millisecondsToTime(sunset)}</p>\r\n            <p className='subText3'>일몰</p>\r\n          </div>\r\n        ) : (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiSunrise />\r\n            </IconContext.Provider>\r\n            <p className='numberText3'>{millisecondsToTime(sunrise)}</p>\r\n            <p className='subText3'>일출</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_now_bottomcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastNowcard;\r\n","import React from 'react';\r\n\r\n// css\r\nimport './ForecastLinecard.scss';\r\n\r\nimport { WeatherTypeText } from '../functions/changeWeatherData';\r\n\r\nconst ForecastLinecard = ({ text, weatherType }) => {\r\n  return (\r\n    <div className='forecast_lineCard'>\r\n      <div className='forecast_lineCard_line' />\r\n      <div className='forecast_lineCard_left' />\r\n      {text === '잠시 후' ? (\r\n        <div className='forecast_lineCard_right'>\r\n          <p className='nextTimeTitle'>{text}</p>\r\n          <p className='nextWeatherTitle'>{WeatherTypeText(weatherType)}</p>\r\n        </div>\r\n      ) : (\r\n        <div className='forecast_lineCard_right'>\r\n          <p className='nextTimeTitle'>{text}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastLinecard;\r\n","import React from 'react';\r\n\r\n// Icon 설정 파일\r\nimport { IconContext } from 'react-icons';\r\n// 디자인 circle 가져오기\r\nimport { FaCircle } from 'react-icons/fa';\r\n\r\n// 날씨데이터에 따른 데이터 가공 함수 모음\r\nimport {\r\n  WeatherTypeText,\r\n  WeatherTypeIconWithForecast,\r\n  WeatherTypeColorWithForecast\r\n} from '../functions/changeWeatherData';\r\n\r\nimport './ForecastNext24.scss';\r\n\r\n// 다음 24시간의 날씨 변화를 감지해서 날씨가 바뀔 때만 array 에 저장\r\nconst forecastReducer = (accumulator, value, index, array) => {\r\n  if (accumulator[0] === undefined) {\r\n    accumulator.push(value);\r\n  } else if (accumulator[accumulator.length - 1].weatherType !== value.weatherType) {\r\n    accumulator.push(value);\r\n  }\r\n  return accumulator;\r\n};\r\n\r\n// 24시간동안 감지된 날씨 변화를 텍스트로 바꾸기\r\nconst next24Textloop = arr => {\r\n  return arr\r\n    .map((value, index) => {\r\n      if (index === 0) {\r\n        return WeatherTypeText(value.weatherType);\r\n      } else {\r\n        return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} ${\r\n          value.dt_hours <= 12 ? `오전 ${value.dt_hours}` : `오후 ${value.dt_hours - 12}`\r\n        }시 부터 ${WeatherTypeText(value.weatherType)}`;\r\n      }\r\n    })\r\n    .toString();\r\n};\r\n\r\nconst ForecastNext24 = ({ forecast, sunrise, sunset }) => {\r\n  const next24Info = forecast.reduce(forecastReducer, []);\r\n  const style = WeatherTypeColorWithForecast(next24Info);\r\n  const bgColor = {\r\n    background: style.bgColor,\r\n    color: style.textColor\r\n  };\r\n\r\n  return (\r\n    <div className='forecast_card_next24' style={bgColor}>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_next24_topcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n      <div className='forecast_card_next24_left'>\r\n        <IconContext.Provider value={{ size: '3.5em' }}>\r\n          <WeatherTypeIconWithForecast array={next24Info} />\r\n        </IconContext.Provider>\r\n      </div>\r\n      <div className='forecast_card_next24_right'>\r\n        <p className='tomorrowTimeTitle'>다음 24시간</p>\r\n        <p className='tomorrowWeatherTitle'>{next24Textloop(next24Info)}</p>\r\n      </div>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_next24_bottomcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastNext24;\r\n","import React from 'react';\r\n\r\nimport {\r\n  WeatherTypeColorWithForecast,\r\n  WeatherTypeIconWithForecast,\r\n  WeatherTypeText\r\n} from '../functions/changeWeatherData';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaCircle } from 'react-icons/fa';\r\n\r\nimport './Forecast4dayscard.scss';\r\n\r\n// 다음 24시간의 날씨 변화를 감지해서 날씨가 바뀔 때만 array 에 저장\r\nconst forecastReducer = (accumulator, value, index, array) => {\r\n  if (accumulator[0] === undefined) {\r\n    accumulator.push(value);\r\n  } else if (accumulator[accumulator.length - 1].weatherType !== value.weatherType) {\r\n    accumulator.push(value);\r\n  }\r\n  return accumulator;\r\n};\r\n\r\n// 24시간동안 감지된 날씨 변화를 텍스트로 바꾸기\r\nconst ForecastTextloop = arr => {\r\n  return arr\r\n    .map((value, index) => {\r\n      if (index === 0) {\r\n        return WeatherTypeText(value.weatherType);\r\n      } else {\r\n        return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} ${\r\n          value.dt_hours <= 12 ? `오전 ${value.dt_hours}` : `오후 ${value.dt_hours - 12}`\r\n        }시 부터 ${WeatherTypeText(value.weatherType)}`;\r\n      }\r\n    })\r\n    .toString();\r\n};\r\n\r\n// 가장 낮은 온도와 가장 높은 온도 뽑아내기\r\nconst tempReducer = (accumulator, obj, index, array) => {\r\n  if (accumulator[0] === undefined) {\r\n    accumulator[0] = obj.temp;\r\n    accumulator[1] = obj.temp;\r\n  } else if (accumulator[0] > obj.temp) {\r\n    accumulator[0] = obj.temp;\r\n  } else if (accumulator[1] < obj.temp) {\r\n    accumulator[1] = obj.temp;\r\n  }\r\n  return accumulator;\r\n};\r\n\r\nconst Forecast4dayscard = ({ forecast, today }) => {\r\n  // 넘어온 날씨 예보 정보를 날짜별로 추리기\r\n  let forecast_classifi = [];\r\n  for (let i = 1; i < 5; i++) {\r\n    const dayCheck = today.getDate() + i;\r\n    forecast_classifi.push(\r\n      forecast.filter(obj => {\r\n        return obj.dt_day === dayCheck;\r\n      })\r\n    );\r\n  }\r\n\r\n  const forecast_textInfo = forecast_classifi.map(arr => {\r\n    return arr.reduce(forecastReducer, []);\r\n  });\r\n\r\n  const forecast_tempInfo = forecast_classifi.map(arr => {\r\n    return arr.reduce(tempReducer, []);\r\n  });\r\n\r\n  // 각 날짜별 색 설정\r\n  let bgColor = [];\r\n  for (const arr of forecast_classifi) {\r\n    const style = WeatherTypeColorWithForecast(arr);\r\n    bgColor.push({\r\n      background: style.bgColor,\r\n      color: style.textColor,\r\n      boxShadow: style.shadow\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className='forecast_card_4days'>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_4days_topcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n      <div className='forecast_card_4days_dayTop' style={bgColor[0]}>\r\n        <div className='forecast_card_4days_dayTop_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[0]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_dayTop_center'>\r\n          <p className='forecast_card_4days_dayTop_center_timeTitle'>\r\n            내일 ({forecast_classifi[0][0].dt_day}일)\r\n          </p>\r\n          <p className='forecast_card_4days_dayTop_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[0])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_dayTop_right'>\r\n          <p className='forecast_card_4days_dayTop_right_tempTitle'>\r\n            {forecast_tempInfo[0][0]}˚| {forecast_tempInfo[0][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_4days_day' style={bgColor[1]}>\r\n        <div className='forecast_card_4days_day_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[1]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_day_center'>\r\n          <p className='forecast_card_4days_day_center_timeTitle'>\r\n            모레({forecast_classifi[1][0].dt_day}일)\r\n          </p>\r\n          <p className='forecast_card_4days_day_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[1])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_day_right'>\r\n          <p className='forecast_card_4days_day_right_tempTitle'>\r\n            {forecast_tempInfo[1][0]}˚| {forecast_tempInfo[1][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_4days_day' style={bgColor[2]}>\r\n        <div className='forecast_card_4days_day_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[2]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_day_center'>\r\n          <p className='forecast_card_4days_day_center_timeTitle'>\r\n            {forecast_textInfo[2][0].dt_day}일\r\n          </p>\r\n          <p className='forecast_card_4days_day_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[2])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_day_right'>\r\n          <p className='forecast_card_4days_day_right_tempTitle'>\r\n            {forecast_tempInfo[2][0]}˚| {forecast_tempInfo[2][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_4days_dayBottom' style={bgColor[3]}>\r\n        <div className='forecast_card_4days_dayBottom_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[3]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_dayBottom_center'>\r\n          <p className='forecast_card_4days_dayBottom_center_timeTitle'>\r\n            {forecast_classifi[3][0].dt_day}일\r\n          </p>\r\n          <p className='forecast_card_4days_dayBottom_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[3])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_dayBottom_right'>\r\n          <p className='forecast_card_4days_dayBottom_right_tempTitle'>\r\n            {forecast_tempInfo[3][0]}˚| {forecast_tempInfo[3][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast4dayscard;\r\n","// forecast.js 현재 날씨 정보 가져오기\r\nexport const _getForecastNowInfo = async (lat, lon) => {\r\n  const weatherNow = await _getWeatherNow(lat, lon);\r\n  // 주소의 경우 한국이면 다음 지도 사용\r\n  // 아닌 경우 날씨 API 에서 제공하는 이름 그대로 사용\r\n  let address = null;\r\n  if (lat >= 33 && lat <= 43 && lon >= 124 && lon <= 132) {\r\n    address = await _getAddr(lat, lon);\r\n  } else {\r\n    address = weatherNow.name;\r\n  }\r\n  return {\r\n    address: address,\r\n    weatherType: _changeWCode(weatherNow.weather[0].id),\r\n    temp: Math.floor(weatherNow.main.temp),\r\n    humidity: weatherNow.main.humidity,\r\n    windSpeed: weatherNow.wind.speed,\r\n    windDeg: weatherNow.wind.deg,\r\n    // 일출, 일몰 데이터의 경우 초 단위 데이터가 들어옴\r\n    // Date.now() 는 단위가 밀리초여서 비교가 불가능\r\n    // *1000 을 통해 밀리초로 변경\r\n    sunrise: weatherNow.sys.sunrise * 1000,\r\n    sunset: weatherNow.sys.sunset * 1000,\r\n    rain: weatherNow.rain\r\n  };\r\n};\r\n\r\nexport const _getDateString = date => {\r\n  const dateText = date.toLocaleString('ko-KR');\r\n  return dateText.length === 23 ? dateText.substr(0, 20) : dateText.substr(0, 21);\r\n};\r\n\r\n// forecast.js 미래 날씨 예측 정보 가저오기\r\nexport const _getForecastNext5Info = async (lat, lon) => {\r\n  const weatherNext5 = await _getWeatherNext5(lat, lon);\r\n  const list = weatherNext5.list.map(obj => {\r\n    const date = new Date(obj.dt * 1000);\r\n    return {\r\n      dt: obj.dt * 1000,\r\n      dt_month: date.getMonth() + 1,\r\n      dt_day: date.getDate(),\r\n      dt_hours: date.getHours(),\r\n      weatherType: _changeWCode(obj.weather[0].id),\r\n      temp: Math.floor(obj.main.temp)\r\n    };\r\n  });\r\n  return list;\r\n};\r\n\r\n// 메인 페이지 현재 날씨 정보 가져오기\r\nexport const _getCardLocaInfo = async (lat, lon) => {\r\n  const weatherNow = await _getWeatherNow(lat, lon);\r\n  let address = null;\r\n  if (lat >= 33 && lat <= 43 && lon >= 124 && lon <= 132) {\r\n    address = await _getAddr(lat, lon);\r\n  } else {\r\n    address = weatherNow.name;\r\n  }\r\n  return {\r\n    address: address,\r\n    temp: Math.floor(weatherNow.main.temp),\r\n    weatherType: _changeWCode(weatherNow.weather[0].id),\r\n    sunrise: weatherNow.sys.sunrise * 1000,\r\n    sunset: weatherNow.sys.sunset * 1000\r\n  };\r\n};\r\n\r\n// weather type code 를 text 로 변경\r\nconst _changeWCode = id => {\r\n  if (id >= 200 && id < 300) {\r\n    return 'Thunderstorm';\r\n  } else if (id >= 300 && id < 400) {\r\n    return 'Drizzle';\r\n  } else if (id >= 500 && id < 600) {\r\n    return 'Rain';\r\n  } else if (id >= 600 && id < 700) {\r\n    return 'Snow';\r\n  } else if (id >= 700 && id < 800) {\r\n    return 'Atmosphere';\r\n  } else if (id === 800) {\r\n    return 'Clear';\r\n  } else if (id > 800 && id < 900) {\r\n    return 'Clouds';\r\n  } else {\r\n    throw new Error('날씨 코드가 이상해!');\r\n  }\r\n};\r\n// 좌표 위치\r\nconst _getAddr = async (lat, lon) => {\r\n  const address = await fetch(\r\n    `https://dapi.kakao.com/v2/local/geo/coord2regioncode.json?x=${lon}&y=${lat}`,\r\n    {\r\n      headers: {\r\n        Authorization: `KakaoAK ${process.env.REACT_APP_KAKAO_API_KEY}`\r\n      }\r\n    }\r\n  )\r\n    .then(response => response.json())\r\n    .then(json => json.documents[0].address_name);\r\n  return address;\r\n};\r\n// 현재 날씨\r\nconst _getWeatherNow = async (lat, lon) => {\r\n  const weather = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${\r\n      process.env.REACT_APP_WEATHER_API_KEY\r\n    }&units=metric`\r\n  ).then(response => response.json());\r\n  return weather;\r\n};\r\n\r\n// 미래 5일 날씨 예보\r\nconst _getWeatherNext5 = async (lat, lon) => {\r\n  const weather = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&APPID=${\r\n      process.env.REACT_APP_WEATHER_API_KEY\r\n    }&units=metric`\r\n  ).then(response => response.json());\r\n  return weather;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\n// NavLink 사용\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// 컴포넌트 불러오기\r\nimport { MainHeader, MainPlacesCard, MainErrorCard } from '../components';\r\n\r\nimport './Home.scss';\r\n// weather API 및 주소 API 에서 가공된 데이터 가져오기\r\nimport { _getCardLocaInfo, _getDateString } from '../functions/getData';\r\n\r\nconst getNowDate = new Date();\r\nconst coords = [\r\n  {\r\n    lon: 127,\r\n    lat: 37.583328,\r\n    address: '서울'\r\n  },\r\n  {\r\n    lon: 126.416107,\r\n    lat: 37.450001,\r\n    address: '인천'\r\n  },\r\n  {\r\n    lon: 129.050003,\r\n    lat: 35.133331,\r\n    address: '부산'\r\n  },\r\n  {\r\n    lon: 128.550003,\r\n    lat: 35.799999,\r\n    address: '대구'\r\n  },\r\n  {\r\n    lon: 127.416672,\r\n    lat: 36.333328,\r\n    address: '대전'\r\n  },\r\n  {\r\n    lon: 126.916672,\r\n    lat: 35.166672,\r\n    address: '광주'\r\n  },\r\n  {\r\n    lon: 129.266663,\r\n    lat: 35.566669,\r\n    address: '울산'\r\n  },\r\n  {\r\n    lon: 126.521942,\r\n    lat: 33.50972,\r\n    address: '제주'\r\n  }\r\n];\r\nconst cardlist = arr => {\r\n  const listItems = arr.map(obj => {\r\n    return (\r\n      <NavLink key={`${obj.lat}_${obj.lon}`} to={`forecast/${obj.lat}/${obj.lon}`} className='item'>\r\n        <MainPlacesCard\r\n          key={`${obj.lat}_${obj.lon}`}\r\n          locationTitle={obj.address}\r\n          locationSub={obj.subaddress}\r\n          weatherType={obj.type}\r\n          temperature={obj.temp}\r\n          sunrise={obj.sunrise}\r\n          sunset={obj.sunset}\r\n        />\r\n      </NavLink>\r\n    );\r\n  });\r\n  return <div className='cardList'>{listItems}</div>;\r\n};\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    isLoaded: false,\r\n    time: _getDateString(getNowDate),\r\n    error: null,\r\n    card: [],\r\n    cardCount: 9\r\n  };\r\n\r\n  componentDidMount() {\r\n    // 현재 위치(좌표) 확인해서 API 에서 가공된 데이터 가져오기\r\n    navigator.geolocation.getCurrentPosition(\r\n      async position => {\r\n        for (let index = 0; index < 9; index++) {\r\n          let obj = null;\r\n          if (index === 0) {\r\n            obj = await _getCardLocaInfo(position.coords.latitude, position.coords.longitude);\r\n            this.setState({\r\n              card: [\r\n                {\r\n                  lat: position.coords.latitude,\r\n                  lon: position.coords.longitude,\r\n                  address: obj.address,\r\n                  subaddress: '현재 위치',\r\n                  temp: obj.temp,\r\n                  type: obj.weatherType,\r\n                  sunrise: obj.sunrise,\r\n                  sunset: obj.sunset\r\n                }\r\n              ]\r\n            });\r\n          } else if (index === 8) {\r\n            obj = await _getCardLocaInfo(coords[index - 1].lat, coords[index - 1].lon);\r\n            this.setState({\r\n              card: [\r\n                ...this.state.card,\r\n                {\r\n                  lat: coords[index - 1].lat,\r\n                  lon: coords[index - 1].lon,\r\n                  address: coords[index - 1].address,\r\n                  subaddress: '대한민국',\r\n                  temp: obj.temp,\r\n                  type: obj.weatherType,\r\n                  sunrise: obj.sunrise,\r\n                  sunset: obj.sunset\r\n                }\r\n              ],\r\n              isLoaded: true\r\n            });\r\n          } else {\r\n            obj = await _getCardLocaInfo(coords[index - 1].lat, coords[index - 1].lon);\r\n            this.setState({\r\n              card: [\r\n                ...this.state.card,\r\n                {\r\n                  lat: coords[index - 1].lat,\r\n                  lon: coords[index - 1].lon,\r\n                  address: coords[index - 1].address,\r\n                  subaddress: '대한민국',\r\n                  temp: obj.temp,\r\n                  type: obj.weatherType,\r\n                  sunrise: obj.sunrise,\r\n                  sunset: obj.sunset\r\n                }\r\n              ]\r\n            });\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        this.setState({\r\n          error: error\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        {state.isLoaded ? (\r\n          <div className='list'>\r\n            <MainHeader nowTime={state.time} />\r\n            {cardlist(state.card)}\r\n            {/* 카드 추가 기능 - 구현 시 사용\r\n        <div className='list_card_add'>\r\n        <IconContext.Provider value={{ size: '3em', color: 'white' }}>\r\n            <FaPlusSquare />\r\n            </IconContext.Provider>\r\n        </div> \r\n      */}\r\n          </div>\r\n        ) : state.error ? (\r\n          <div className='list'>\r\n            <MainHeader nowTime={state.time} />\r\n            <MainErrorCard />\r\n          </div>\r\n        ) : (\r\n          <div className='list'>\r\n            <MainHeader nowTime={state.time} />\r\n            <p style={{ textAlign: 'center', color: 'white', margin: 'auto' }}>로딩중...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './Forecast.scss';\r\nimport { _getForecastNowInfo, _getDateString, _getForecastNext5Info } from '../functions/getData';\r\n\r\nimport {\r\n  ForecastHeader,\r\n  ForecastNowcard,\r\n  ForecastLinecard,\r\n  ForecastNext24,\r\n  Forecast4dayscard\r\n} from '../components';\r\n\r\nconst getWeatherData = async (lat, lon) => {\r\n  const nowWeather = await _getForecastNowInfo(lat, lon);\r\n  const nextWeather = await _getForecastNext5Info(lat, lon);\r\n  return {\r\n    nowWeather: {\r\n      address: nowWeather.address,\r\n      weatherType: nowWeather.weatherType,\r\n      temp: nowWeather.temp,\r\n      humidity: nowWeather.humidity,\r\n      windSpeed: nowWeather.windSpeed,\r\n      windDeg: nowWeather.windDeg,\r\n      sunrise: nowWeather.sunrise,\r\n      sunset: nowWeather.sunset,\r\n      rain: nowWeather.rain\r\n    },\r\n    nextWeather\r\n  };\r\n};\r\n\r\nconst getNowDate = new Date();\r\nconst year = getNowDate.getFullYear();\r\nconst month = getNowDate.getMonth();\r\nconst day = getNowDate.getDate() + 1;\r\nconst hours = getNowDate.getHours();\r\nconst minute = getNowDate.getMinutes();\r\nconst Nextday = new Date(year, month, day, hours, minute);\r\nexport default class Forecast extends Component {\r\n  state = {\r\n    isLoaded: false,\r\n    time: _getDateString(getNowDate),\r\n    error: null,\r\n    nowcard: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    getWeatherData(this.props.match.params.lat, this.props.match.params.lon).then(res =>\r\n      this.setState({\r\n        nowcard: res.nowWeather,\r\n        forecastcard: res.nextWeather,\r\n        isLoaded: true\r\n      })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        {state.isLoaded ? (\r\n          <div className='forecast'>\r\n            <ForecastHeader address={state.nowcard.address} nowTime={state.time} />\r\n            <ForecastNowcard\r\n              weatherType={state.nowcard.weatherType}\r\n              temp={state.nowcard.temp}\r\n              humidity={state.nowcard.humidity}\r\n              windSpeed={state.nowcard.windSpeed}\r\n              windDeg={state.nowcard.windDeg}\r\n              sunrise={state.nowcard.sunrise}\r\n              sunset={state.nowcard.sunset}\r\n              rain={state.nowcard.rain}\r\n              time={state.time}\r\n            />\r\n            <ForecastLinecard text='잠시 후' weatherType={state.forecastcard[0].weatherType} />\r\n            <ForecastNext24\r\n              forecast={state.forecastcard.filter(obj => {\r\n                return obj.dt <= Nextday;\r\n              })}\r\n              sunrise={state.nowcard.sunrise}\r\n              sunset={state.nowcard.sunset}\r\n            />\r\n            <ForecastLinecard text='다음 4일' weatherType={''} />\r\n            <Forecast4dayscard forecast={state.forecastcard} today={getNowDate} />\r\n          </div>\r\n        ) : (\r\n          <div className='forecast'>\r\n            <ForecastHeader address='' nowTime={state.time} />\r\n            <p\r\n              style={{\r\n                textAlign: 'center',\r\n                color: 'white',\r\n                margin: 'auto',\r\n                gridArea: '2 / 1 / 3 / span2'\r\n              }}\r\n            >\r\n              로딩중...\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div style={{ color: 'white', margin: 'auto' }}>\r\n      <p style={{ textAlign: 'center' }}>페이지를 찾을 수 없습니다.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { Home, Forecast, NoMatch } from '../pages';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route path='/forecast/:lat/:lon' component={Forecast} />\r\n          <Route component={NoMatch} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '../shared/App';\r\n\r\nconst Root = () => {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './client/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}