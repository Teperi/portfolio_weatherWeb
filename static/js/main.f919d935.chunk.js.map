{"version":3,"sources":["components/MainHeader.js","functions/changeWeatherData.js","components/MainPlacesCard.js","components/MainErrorCard.js","components/ForecastHeader.js","components/ForecastNowcard.js","components/ForecastLinecard.js","components/ForecastNext24.js","components/Forecast4dayscard.js","components/ForecastChart.js","functions/getData.js","pages/Home.js","pages/Forecast.js","pages/NoMatch.js","shared/App.js","client/Root.js","serviceWorker.js","index.js"],"names":["MainHeader","_ref","nowTime","react_default","a","createElement","className","style","color","href","textDecoration","esm","Provider","value","size","index_esm","WeatherTypeIconWithHours","props","type","timeInMs","Date","now","wi_index_esm","sunrise","sunset","console","log","fa_index_esm","WeatherTypeColorWithHours","bgColor","textColor","shadow","WeatherTypeIconWithForecast","array","findArr","findWeatherType","find","obj","includes","weatherType","undefined","WeatherTypeColorWithForecast","WeatherTypeText","millisecondsToTime","ms","date","hours","getHours","minutes","getMinutes","concat","MainPlacesCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","background","changeWeatherData_WeatherTypeIconWithHours","locationTitle","locationSub","temperature","Component","MainErrorCard","ForecastHeader","address","react_router_dom","exact","to","ForecastNowcard","degree","temp","humidity","windSpeed","windDeg","rain","time","boxShadow","ForecastLinecard","text","forecastReducer","accumulator","index","push","length","ForecastNext24","forecast","next24Info","reduce","changeWeatherData_WeatherTypeIconWithForecast","arr","map","dt_hours","dt_day","toString","weatherText2","weatherText3","twoPeriods2","weatherText1","weatherTime","twoPeriods","day","next24Textloop","ForecastTextloop","tempReducer","Forecast4dayscard","today","forecast_classifi","_loop","i","lastday","getYear","getMonth","getDate","dayCheck","dayCount","filter","forecast_textInfo","forecast_tempInfo","_i","_forecast_classifi","legendOpts","display","position","fullWidth","labels","fontColor","ForecastChart","data","datasets","label","fill","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","yAxisID","datalabels","align","anchor","borderRadius","borderWidth","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","options","responsive","elements","line","scales","xAxes","ticks","fontSize","gridLines","yAxes","id","show","scaleLabel","labelString","suggestedMin","suggestedMax","textAlign","es","legend","_getForecastNowInfo","asyncToGenerator","regenerator_default","mark","_callee","lat","lon","weatherNow","wrap","_context","prev","next","_getWeatherNow","sent","_getAddr","name","abrupt","_changeWCode","weather","Math","floor","main","wind","speed","deg","sys","stop","_x","_x2","apply","arguments","_getDateString","dateText","toLocaleString","substr","_getForecastNext5Info","_ref2","_callee2","weatherNext5","list","_context2","_getWeatherNext5","dt","dt_month","_x3","_x4","_getCardLocaInfo","_ref3","_callee3","_context3","_x5","_x6","Error","_ref4","_callee4","_context4","fetch","headers","Authorization","process","then","response","json","documents","address_name","_x7","_x8","_ref5","_callee5","_context5","_x9","_x10","_ref6","_callee6","_context6","_x11","_x12","getNowDate","coords","Home","isLoaded","error","card","cardCount","_this2","navigator","geolocation","getCurrentPosition","latitude","longitude","setState","subaddress","toConsumableArray","src_components_MainHeader","listItems","key","MainPlacesCard_MainPlacesCard","cardlist","MainErrorCard_MainErrorCard","margin","getWeatherData","nowWeather","nextWeather","year","getFullYear","month","minute","Nextday","Forecast","nowcard","match","params","res","forecastcard","src_components_ForecastHeader","src_components_ForecastNowcard","src_components_ForecastLinecard","src_components_ForecastNext24","src_components_Forecast4dayscard","ForecastChart_ForecastChart","gridArea","NoMatch","App","react_router","path","component","Root","basename","shared_App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","client_Root","document","getElementById","URL","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8RAqBeA,SAdI,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CAAEC,MAAO,UAC1CL,EAAAC,EAAAC,cAAA,KAAGI,KAAK,IAAIF,MAAO,CAAEG,eAAgB,SACnCP,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,MAAON,MAAO,UACjDL,EAAAC,EAAAC,cAACU,EAAA,EAAD,QAGJZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,gBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBJ,oBCAzBc,EAA2B,SAAAC,GACtC,IAAMC,EAAOD,EAAMC,KACbC,EAAWC,KAAKC,MACtB,MAAa,iBAATH,EACKf,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACW,YAATJ,EACFf,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACW,SAATJ,EACFf,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACW,SAATJ,EACFf,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACW,eAATJ,EACLC,GAAYF,EAAMM,SAAWJ,GAAYF,EAAMO,OAC1CrB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAEAnB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAES,UAATJ,EACLC,GAAYF,EAAMM,SAAWJ,GAAYF,EAAMO,OAC1CrB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAEAnB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAES,WAATJ,EACFf,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEPG,QAAQC,IAAI,uDACLvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,QAKEC,EAA4B,SAACV,EAAMK,EAASC,GACvD,IAAML,EAAWC,KAAKC,MACtB,MAAa,iBAATH,EACK,CACLW,QAAS,UACTC,UAAW,UACXC,OAAQ,yBAEQ,YAATb,EACF,CACLW,QAAS,UACTC,UAAW,OACXC,OAAQ,qBAEQ,SAATb,EACF,CACLW,QAAS,UACTC,UAAW,UACXC,OAAQ,qBAEQ,SAATb,EACF,CACLW,QAAS,UACTC,UAAW,OACXC,OAAQ,qBAEQ,eAATb,EACF,CACLW,QAAS,UACTC,UAAW,OACXC,OAAQ,qBAEQ,UAATb,EACLC,GAAYI,GAAWJ,GAAYK,EAC9B,CACLK,QAAS,UACTC,UAAW,OACXC,OAAQ,qBAGH,CACLF,QAAS,UACTC,UAAW,UACXC,OAAQ,qBAGM,WAATb,EACF,CACLW,QAAS,UACTC,UAAW,UACXC,OAAQ,sBAGVN,QAAQC,IAAI,wDACL,CACLG,QAAS,UACTC,UAAW,UACXC,OAAQ,uBAKDC,EAA8B,SAAA/B,GAAe,IAAZgC,EAAYhC,EAAZgC,MACtCC,EAAU,CAAC,OAAQ,UAAW,eAAgB,QAE9CC,EAAkBF,EAAMG,KAAK,SAAAC,GACjC,OAAOH,EAAQI,SAASD,EAAIE,eAE9B,YAAwBC,IAApBL,EAC2B,eAAzBF,EAAM,GAAGM,YACJpC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAC2B,UAAzBW,EAAM,GAAGM,YACXpC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAC2B,WAAzBW,EAAM,GAAGM,YACXpC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEPG,QAAQC,IAAI,uDACLvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,OAG2B,iBAAhCQ,EAAgBI,YACXpC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACkC,YAAhCa,EAAgBI,YAClBpC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACkC,SAAhCa,EAAgBI,YAClBpC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACkC,SAAhCa,EAAgBI,YAClBpC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEPG,QAAQC,IAAI,uDACLvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,QAKAc,EAA+B,SAAAR,GAC1C,IAAMC,EAAU,CAAC,OAAQ,UAAW,eAAgB,QAC9CC,EAAkBF,EAAMG,KAAK,SAAAC,GACjC,OAAOH,EAAQI,SAASD,EAAIE,eAE9B,YAAwBC,IAApBL,EAC2B,eAAzBF,EAAM,GAAGM,YACJ,CACLV,QAAS,UACTC,UAAW,OACXC,OAAQ,qBAEwB,UAAzBE,EAAM,GAAGM,YACX,CACLV,QAAS,UACTC,UAAW,OACXC,OAAQ,qBAEwB,WAAzBE,EAAM,GAAGM,YACX,CACLV,QAAS,UACTC,UAAW,UACXC,OAAQ,sBAGVN,QAAQC,IAAI,wDACL,CACLG,QAAS,UACTC,UAAW,UACXC,OAAQ,sBAIwB,iBAAhCI,EAAgBI,YACX,CACLV,QAAS,UACTC,UAAW,UACXC,OAAQ,yBAE+B,YAAhCI,EAAgBI,YAClB,CACLV,QAAS,UACTC,UAAW,OACXC,OAAQ,qBAE+B,SAAhCI,EAAgBI,YAClB,CACLV,QAAS,UACTC,UAAW,UACXC,OAAQ,qBAE+B,SAAhCI,EAAgBI,YAClB,CACLV,QAAS,UACTC,UAAW,OACXC,OAAQ,sBAGVN,QAAQC,IAAI,wDACL,CACLG,QAAS,UACTC,UAAW,UACXC,OAAQ,uBAOHW,EAAkB,SAAAxB,GAC7B,MAAa,iBAATA,EACK,eACW,YAATA,EACF,qBACW,SAATA,EACF,SACW,SAATA,EACF,SACW,eAATA,EACF,eACW,UAATA,EACF,eACW,WAATA,EACF,gBAEPO,QAAQC,IAAI,oEACL,8BA6DEiB,EAAqB,SAAAC,GAChC,IAAMC,EAAO,IAAIzB,KAAKwB,GAChBE,EAAQD,EAAKE,WACbC,EAAUH,EAAKI,aACrB,SAAAC,OAAUJ,EAAQ,GAAR,IAAAI,OAAiBJ,GAAUA,EAArC,KAAAI,OAA8CF,EAAU,GAAV,IAAAE,OAAmBF,GAAYA,IC1R1DG,qBACnB,SAAAA,EAAYlC,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMtC,KACD0C,MAAQ/B,EAA0BX,EAAMsB,YAAatB,EAAMM,QAASN,EAAMO,QAF9D4B,wEAMjB,IAAMvB,EAAU,CACd+B,WAAYL,KAAKI,MAAM9B,QACvBrB,MAAO+C,KAAKI,MAAM7B,WAEpB,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAOsB,GACjC1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QACnCX,EAAAC,EAAAC,cAACwD,EAAD,CACE3C,KAAMqC,KAAKtC,MAAMsB,YACjBhB,QAASgC,KAAKtC,MAAMM,QACpBC,OAAQ+B,KAAKtC,MAAMO,UAGvBrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBiD,KAAKtC,MAAM6C,eAC1C3D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBiD,KAAKtC,MAAM8C,cAE1C5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeiD,KAAKtC,MAAM+C,YAAvC,mBAzBkCC,cCLvBC,mLAEjB,OACE/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAO,CAAEqD,WAAY,YAC/CzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QAASN,MAAO,YACnDL,EAAAC,EAAAC,cAACsB,EAAA,EAAD,QAGJxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,uFACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,kFAXiC2D,aCe5BE,SAdQ,SAAAlE,GAA0B,IAAvBmE,EAAuBnE,EAAvBmE,QAASlE,EAAcD,EAAdC,QACjC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,MAAO,CAAEC,MAAO,UAC9CL,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,KAChBpE,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,MAAON,MAAO,UACjDL,EAAAC,EAAAC,cAACU,EAAA,EAAD,QAGJZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuB8D,GACpCjE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBJ,MCuG3BsE,SAnGS,SAAAvE,GAUlB,IJ2N0BwE,EIpO9BlC,EASItC,EATJsC,YACAmC,EAQIzE,EARJyE,KACAC,EAOI1E,EAPJ0E,SACAC,EAMI3E,EANJ2E,UACAC,EAKI5E,EALJ4E,QACAtD,EAIItB,EAJJsB,QACAC,EAGIvB,EAHJuB,OACAsD,EAEI7E,EAFJ6E,KACAC,EACI9E,EADJ8E,KAEMxE,EAAQqB,EAA0BW,EAAahB,EAASC,GACxDK,EAAU,CACd+B,WAAYrD,EAAMsB,QAClBrB,MAAOD,EAAMuB,WAETC,EAAS,CACbiD,UAAWzE,EAAMwB,QAEnB,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBC,MAAOsB,GACxC1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBC,MAAOwB,GAE5C5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QACnCX,EAAAC,EAAAC,cAACwD,EAAD,CAA0B3C,KAAMqB,EAAahB,QAASA,EAASC,OAAQA,MAI3ErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,gBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBoC,EAAgBH,KAG/CpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBoE,EAAjC,YAGJvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAEI,SAAhBiC,GAA0C,YAAhBA,EACzBpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QAASR,UAAW,mBACvDH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEFnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAwBkC,IAATsC,EAAqB,EAAIA,EAAK,MAA1D,OACA3E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,uBAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QAASR,UAAW,mBACvDH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEFnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeqE,EAA5B,MACAxE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,iBAWJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QAASR,UAAW,mBACvDH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEFnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAesE,EAA5B,QACAzE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aJ+JSmE,EI/JoBI,IJgKpC,OAASJ,EAAS,MACvB,qBACEA,GAAU,OAASA,EAAS,MAC9B,eACEA,GAAU,OAASA,EAAS,MAC9B,qBACEA,GAAU,OAASA,EAAS,OAC9B,SACEA,GAAU,QAAUA,EAAS,OAC/B,qBACEA,GAAU,QAAUA,EAAS,OAC/B,eACEA,GAAU,QAAUA,EAAS,OAC/B,qBACEA,GAAU,QAAUA,EAAS,OAC/B,SACEA,GAAU,QAAUA,EAAS,OAC/B,qBACEA,GAAU,QAAUA,EAAS,OAC/B,eACEA,GAAU,QAAUA,EAAS,OAC/B,qBACEA,GAAU,QAAUA,EAAS,OAC/B,SACEA,GAAU,QAAUA,EAAS,OAC/B,qBACEA,GAAU,QAAUA,EAAS,OAC/B,eACEA,GAAU,QAAUA,EAAS,OAC/B,qBACGA,GAAU,QAAUA,EAAS,KAASA,GAAU,GAAKA,EAAS,MACjE,UAEPhD,QAAQC,IAAI,6DACL,OIhMFqD,GAAQxD,GAAWwD,GAAQvD,EAC1BrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QAASR,UAAW,mBACvDH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEFnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeqC,EAAmBnB,IAC/CrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,iBAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,QAASR,UAAW,mBACvDH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,OAEFnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeqC,EAAmBpB,IAC/CpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,kBAINH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CACEC,MAAO,CAAEL,MAAO,UAAWF,UAAW,mCAEtCH,EAAAC,EAAAC,cAACsB,EAAA,EAAD,UCxFOsD,SAnBU,SAAAhF,GAA2B,IAAxBiF,EAAwBjF,EAAxBiF,KAAM3C,EAAkBtC,EAAlBsC,YAChC,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACL,wBAAT4E,EACC/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiB4E,GAC9B/E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBoC,EAAgBH,KAGnDpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiB4E,OCFlCC,SAAkB,SAACC,EAAavE,EAAOwE,EAAOpD,GAMlD,YALuBO,IAAnB4C,EAAY,GACdA,EAAYE,KAAKzE,GACRuE,EAAYA,EAAYG,OAAS,GAAGhD,cAAgB1B,EAAM0B,aACnE6C,EAAYE,KAAKzE,GAEZuE,IA0JMI,EAjCQ,SAAAvF,GAAmC,IAAhCwF,EAAgCxF,EAAhCwF,SAClBC,GADkDzF,EAAtBsB,QAAsBtB,EAAbuB,OACxBiE,EAASE,OAAOR,EAAiB,KAC9C5E,EAAQkC,EAA6BiD,GACrC7D,EAAU,CACd+B,WAAYrD,EAAMsB,QAClBrB,MAAOD,EAAMuB,WAGf,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBC,MAAOsB,GAC3C1B,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CACEC,MAAO,CAAEL,MAAO,UAAWF,UAAW,mCAEtCH,EAAAC,EAAAC,cAACsB,EAAA,EAAD,OAEFxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACnCX,EAAAC,EAAAC,cAACuF,EAAD,CAA6B3D,MAAOyD,MAGxCvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,+BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBA3IE,SAAAuF,GAErB,GADApE,QAAQC,IAAImE,GACO,IAAfA,EAAIN,OACN,OAAO7C,EAAgBmD,EAAI,GAAGtD,aACzB,GAAmB,IAAfsD,EAAIN,OACb,OAAOM,EACJC,IAAI,SAACjF,EAAOwE,GACX,OAAc,IAAVA,EACK3C,EAAgB7B,EAAM0B,aAEN,IAAnB1B,EAAMkF,SACR,mDAAA7C,OAAuBR,EAAgB7B,EAAM0B,cACpC1B,EAAMkF,SAAW,GAC1B,GAAA7C,OAAUrC,EAAMmF,SAAWH,EAAIR,EAAQ,GAAGW,OAAhC,mBAAV,kBAAA9C,OACErC,EAAMkF,SADR,uBAAA7C,OAEOR,EAAgB7B,EAAM0B,cACD,KAAnB1B,EAAMkF,SACf,GAAA7C,OAAUrC,EAAMmF,SAAWH,EAAIR,EAAQ,GAAGW,OAAhC,mBAAV,kBAAA9C,OACErC,EAAMkF,SADR,uBAAA7C,OAEOR,EAAgB7B,EAAM0B,cAE7B,GAAAW,OAAUrC,EAAMmF,SAAWH,EAAIR,EAAQ,GAAGW,OAAhC,mBAAV,kBAAA9C,OAAoErC,EAAMkF,SACxE,GADF,uBAAA7C,OACWR,EAAgB7B,EAAM0B,gBAItC0D,WACE,GAAmB,IAAfJ,EAAIN,OAAc,CAC3B,IACIW,EAAcC,EAAcC,EAD1BC,EAAe3D,EAAgBmD,EAAI,GAAGtD,aAiC5C,OA/BwB,IAApBsD,EAAI,GAAGE,UACTG,EAAY,wCACZE,EAAc,gBACLP,EAAI,GAAGE,SAAW,IAC3BG,EAAY,GAAAhD,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OACV2C,EAAI,GAAGE,SADG,YAGZK,EAAc,gBACe,KAApBP,EAAI,GAAGE,UAChBG,EAAY,GAAAhD,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OACV2C,EAAI,GAAGE,SADG,YAGZK,EAAc,iBAEdF,EAAY,GAAAhD,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OAAyD2C,EAAI,GAAGE,SAC1E,GADU,YAEZK,EAAc,gBAGdD,EADsB,IAApBN,EAAI,GAAGE,SACG,sCACHF,EAAI,GAAGE,SAAW,GACf,GAAA7C,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,KAAA9C,OACM,iBAAhBkD,EAAA,mBADU,KAAAlD,OAER2C,EAAI,GAAGE,SAFC,UAGiB,KAApBF,EAAI,GAAGE,SACJ,GAAA7C,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OAAyD2C,EAAI,GAAGE,SAAhE,UAEA,GAAA7C,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,KAAA9C,OACM,iBAAhBkD,EAAA,mBADU,KAAAlD,OAER2C,EAAI,GAAGE,SAAW,GAFV,UAIVF,EAAI,GAAGtD,cAAgBsD,EAAI,GAAGtD,YAChC,GAAAW,OAAUmD,EAAV,KAAAnD,OAA0BgD,GAA1BhD,OAAyCiD,EAAzC,KAAAjD,OAAyDR,EACvDmD,EAAI,GAAGtD,cAGT,GAAAW,OAAUmD,EAAV,KAAAnD,OAA0BgD,GAA1BhD,OAAyCiD,EAAzC,KAAAjD,OAAyDR,EACvDmD,EAAI,GAAGtD,aADT,mBAAAW,OAESR,EAAgBmD,EAAI,GAAGtD,cAGlC,IAAM+D,EAAcT,EAAIC,IAAI,SAACjF,EAAOwE,GAClC,OAAuB,IAAnBxE,EAAMkF,SACD,CAAEQ,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAO,IAC5CjC,EAAMkF,SAAW,GACnB,CAAEQ,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAOjC,EAAMkF,UAC/B,KAAnBlF,EAAMkF,SACR,CAAEQ,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAO,IAE9C,CAAEyD,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAOjC,EAAMkF,SAAW,MAI1E,OAAOF,EACJC,IAAI,SAACjF,EAAOwE,GACX,OAAc,IAAVA,EACK3C,EAAgB7B,EAAM0B,aACpB8C,EAAQiB,EAAYf,OAAS,EAClC1E,EAAMmF,SAAWM,EAAYjB,EAAQ,GAAGmB,IAC1C,iBAAAtD,OAAcoD,EAAYjB,GAAOkB,WAAjC,KAAArD,OAA+CoD,EAAYjB,GAAOvC,MAAlE,aAAAI,OACEoD,EAAYjB,GAAOmB,MAAQF,EAAYjB,EAAQ,GAAGmB,IAAlD,GAAAtD,OAEMoD,EAAYjB,GAAOkB,aAAeD,EAAYjB,EAAQ,GAAGkB,WAAzD,MAAArD,OAEOoD,EAAYjB,EAAQ,GAAGkB,aAJpC,GAAArD,OAMOoD,EAAYjB,EAAQ,GAAGkB,YAPhC,KAAArD,OAQIoD,EAAYjB,EAAQ,GAAGvC,MAR3B,wBAAAI,OAQwCR,EAAgB7B,EAAM0B,cAE9D,IAAAW,OAAWoD,EAAYjB,GAAOkB,WAA9B,KAAArD,OAA4CoD,EAAYjB,GAAOvC,MAA/D,aAAAI,OACEoD,EAAYjB,GAAOmB,MAAQF,EAAYjB,EAAQ,GAAGmB,IAAlD,GAAAtD,OAEMoD,EAAYjB,GAAOkB,aAAeD,EAAYjB,EAAQ,GAAGkB,WAAzD,MAAArD,OAEOoD,EAAYjB,EAAQ,GAAGkB,aAJpC,gBAAArD,OAMUoD,EAAYjB,EAAQ,GAAGkB,YAPnC,KAAArD,OAQIoD,EAAYjB,EAAQ,GAAGvC,MAR3B,wBAAAI,OAQwCR,EAAgB7B,EAAM0B,cAGhE,iBAAAW,OAAcR,EAAgB7B,EAAM0B,gBAGvC0D,WA0BsCQ,CAAef,KAEtDvF,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CACEC,MAAO,CAAEL,MAAO,UAAWF,UAAW,sCAEtCH,EAAAC,EAAAC,cAACsB,EAAA,EAAD,SC9JFwD,SAAkB,SAACC,EAAavE,EAAOwE,EAAOpD,GAMlD,YALuBO,IAAnB4C,EAAY,GACdA,EAAYE,KAAKzE,GACRuE,EAAYA,EAAYG,OAAS,GAAGhD,cAAgB1B,EAAM0B,aACnE6C,EAAYE,KAAKzE,GAEZuE,IAIHsB,EAAmB,SAAAb,GACvB,GAAmB,IAAfA,EAAIN,OACN,OAAO7C,EAAgBmD,EAAI,GAAGtD,aACzB,GAAmB,IAAfsD,EAAIN,OACb,OAAOM,EACJC,IAAI,SAACjF,EAAOwE,GACX,OAAc,IAAVA,EACK3C,EAAgB7B,EAAM0B,aAEN,IAAnB1B,EAAMkF,SACR,mDAAA7C,OAAuBR,EAAgB7B,EAAM0B,cACpC1B,EAAMkF,SAAW,GAC1B,GAAA7C,OAAUrC,EAAMmF,SAAWH,EAAIR,EAAQ,GAAGW,OAAhC,mBAAV,kBAAA9C,OACErC,EAAMkF,SADR,uBAAA7C,OAEOR,EAAgB7B,EAAM0B,cACD,KAAnB1B,EAAMkF,SACf,GAAA7C,OAAUrC,EAAMmF,SAAWH,EAAIR,EAAQ,GAAGW,OAAhC,mBAAV,kBAAA9C,OACErC,EAAMkF,SADR,uBAAA7C,OAEOR,EAAgB7B,EAAM0B,cAE7B,GAAAW,OAAUrC,EAAMmF,SAAWH,EAAIR,EAAQ,GAAGW,OAAhC,mBAAV,kBAAA9C,OAAoErC,EAAMkF,SACxE,GADF,uBAAA7C,OACWR,EAAgB7B,EAAM0B,gBAItC0D,WACE,GAAmB,IAAfJ,EAAIN,OAAc,CAC3B,IACIW,EAAcC,EAAcC,EAD1BC,EAAe3D,EAAgBmD,EAAI,GAAGtD,aAiC5C,OA/BwB,IAApBsD,EAAI,GAAGE,UACTG,EAAY,wCACZE,EAAc,gBACLP,EAAI,GAAGE,SAAW,IAC3BG,EAAY,GAAAhD,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OACV2C,EAAI,GAAGE,SADG,YAGZK,EAAc,gBACe,KAApBP,EAAI,GAAGE,UAChBG,EAAY,GAAAhD,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OACV2C,EAAI,GAAGE,SADG,YAGZK,EAAc,iBAEdF,EAAY,GAAAhD,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OAAyD2C,EAAI,GAAGE,SAC1E,GADU,YAEZK,EAAc,gBAGdD,EADsB,IAApBN,EAAI,GAAGE,SACG,sCACHF,EAAI,GAAGE,SAAW,GACf,GAAA7C,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,KAAA9C,OACM,iBAAhBkD,EAAA,mBADU,KAAAlD,OAER2C,EAAI,GAAGE,SAFC,UAGiB,KAApBF,EAAI,GAAGE,SACJ,GAAA7C,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,kBAAA9C,OAAyD2C,EAAI,GAAGE,SAAhE,UAEA,GAAA7C,OAAM2C,EAAI,GAAGG,SAAWH,EAAI,GAAGG,OAAzB,mBAAN,KAAA9C,OACM,iBAAhBkD,EAAA,mBADU,KAAAlD,OAER2C,EAAI,GAAGE,SAAW,GAFV,UAIVF,EAAI,GAAGtD,cAAgBsD,EAAI,GAAGtD,YAChC,GAAAW,OAAUmD,EAAV,KAAAnD,OAA0BgD,GAA1BhD,OAAyCiD,EAAzC,KAAAjD,OAAyDR,EACvDmD,EAAI,GAAGtD,cAGT,GAAAW,OAAUmD,EAAV,KAAAnD,OAA0BgD,GAA1BhD,OAAyCiD,EAAzC,KAAAjD,OAAyDR,EACvDmD,EAAI,GAAGtD,aADT,mBAAAW,OAESR,EAAgBmD,EAAI,GAAGtD,cAGlC,IAAM+D,EAAcT,EAAIC,IAAI,SAACjF,EAAOwE,GAClC,OAAuB,IAAnBxE,EAAMkF,SACD,CAAEQ,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAO,IAC5CjC,EAAMkF,SAAW,GACnB,CAAEQ,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAOjC,EAAMkF,UAC/B,KAAnBlF,EAAMkF,SACR,CAAEQ,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAO,IAE9C,CAAEyD,WAAY,eAAMC,IAAK3F,EAAMmF,OAAQlD,MAAOjC,EAAMkF,SAAW,MAI1E,OAAOF,EACJC,IAAI,SAACjF,EAAOwE,GACX,OAAc,IAAVA,EACK3C,EAAgB7B,EAAM0B,aACpB8C,EAAQiB,EAAYf,OAAS,EAClC1E,EAAMmF,SAAWM,EAAYjB,EAAQ,GAAGmB,IAC1C,iBAAAtD,OAAcoD,EAAYjB,GAAOkB,WAAjC,KAAArD,OAA+CoD,EAAYjB,GAAOvC,MAAlE,aAAAI,OACEoD,EAAYjB,GAAOmB,MAAQF,EAAYjB,EAAQ,GAAGmB,IAAlD,GAAAtD,OAEMoD,EAAYjB,GAAOkB,aAAeD,EAAYjB,EAAQ,GAAGkB,WAAzD,MAAArD,OAEOoD,EAAYjB,EAAQ,GAAGkB,aAJpC,GAAArD,OAMOoD,EAAYjB,EAAQ,GAAGkB,YAPhC,KAAArD,OAQIoD,EAAYjB,EAAQ,GAAGvC,MAR3B,wBAAAI,OAQwCR,EAAgB7B,EAAM0B,cAE9D,IAAAW,OAAWoD,EAAYjB,GAAOkB,WAA9B,KAAArD,OAA4CoD,EAAYjB,GAAOvC,MAA/D,aAAAI,OACEoD,EAAYjB,GAAOmB,MAAQF,EAAYjB,EAAQ,GAAGmB,IAAlD,GAAAtD,OAEMoD,EAAYjB,GAAOkB,aAAeD,EAAYjB,EAAQ,GAAGkB,WAAzD,MAAArD,OAEOoD,EAAYjB,EAAQ,GAAGkB,aAJpC,gBAAArD,OAMUoD,EAAYjB,EAAQ,GAAGkB,YAPnC,KAAArD,OAQIoD,EAAYjB,EAAQ,GAAGvC,MAR3B,wBAAAI,OAQwCR,EAAgB7B,EAAM0B,cAGhE,iBAAAW,OAAcR,EAAgB7B,EAAM0B,gBAGvC0D,YAKDU,EAAc,SAACvB,EAAa/C,EAAKgD,EAAOpD,GAS5C,YARuBO,IAAnB4C,EAAY,IACdA,EAAY,GAAK/C,EAAIqC,KACrBU,EAAY,GAAK/C,EAAIqC,MACZU,EAAY,GAAK/C,EAAIqC,KAC9BU,EAAY,GAAK/C,EAAIqC,KACZU,EAAY,GAAK/C,EAAIqC,OAC9BU,EAAY,GAAK/C,EAAIqC,MAEhBU,GAqIMwB,EAlIW,SAAA3G,GAAyB,IAAtBwF,EAAsBxF,EAAtBwF,SAAUoB,EAAY5G,EAAZ4G,MACrCpF,QAAQC,IAAI,yEAAmB+D,GAG/B,IADA,IAAIqB,EAAoB,GAHyBC,EAAA,SAIxCC,GACP,IAAMC,EAAU,IAAI7F,KAAKyF,EAAMK,UAAWL,EAAMM,WAAY,GAAGC,UAC3DC,OAAQ,EACNC,EAAWT,EAAMO,UAAYJ,EAEjCK,EADEC,EAAWL,EACFK,EAAWL,EAEXK,EAEbR,EAAkBxB,KAChBG,EAAS8B,OAAO,SAAAlF,GACd,OAAOA,EAAI2D,SAAWqB,MAXnBL,EAAI,EAAGA,EAAI,EAAGA,IAAKD,EAAnBC,GA0BT,IAVA,IAAMQ,EAAoBV,EAAkBhB,IAAI,SAAAD,GAC9C,OAAOA,EAAIF,OAAOR,EAAiB,MAG/BsC,EAAoBX,EAAkBhB,IAAI,SAAAD,GAC9C,OAAOA,EAAIF,OAAOgB,EAAa,MAI7B9E,EAAU,GACd6F,EAAA,EAAAC,EAAkBb,EAAlBY,EAAAC,EAAApC,OAAAmC,IAAqC,CAAhC,IAAM7B,EAAG8B,EAAAD,GACNnH,EAAQkC,EAA6BoD,GAC3ChE,EAAQyD,KAAK,CACX1B,WAAYrD,EAAMsB,QAClBrB,MAAOD,EAAMuB,UACbkD,UAAWzE,EAAMwB,SAIrB,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CACEC,MAAO,CAAEL,MAAO,UAAWF,UAAW,kCAEtCH,EAAAC,EAAAC,cAACsB,EAAA,EAAD,OAEFxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6BC,MAAOsB,EAAQ,IACzD1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACnCX,EAAAC,EAAAC,cAACuF,EAAD,CAA6B3D,MAAO6E,EAAkB,OAG1D3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+CAAb,iBACOwG,EAAkB,GAAG,GAAGd,OAD/B,WAGA7F,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kDACVoG,EAAiBc,EAAkB,MAGxCrH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8CACVmH,EAAkB,GAAG,GADxB,WAC+BA,EAAkB,GAAG,GADpD,gBAKJtH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BC,MAAOsB,EAAQ,IACtD1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACnCX,EAAAC,EAAAC,cAACuF,EAAD,CAA6B3D,MAAO6E,EAAkB,OAG1D3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4CAAb,gBACMwG,EAAkB,GAAG,GAAGd,OAD9B,WAGA7F,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+CACVoG,EAAiBc,EAAkB,MAGxCrH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2CACVmH,EAAkB,GAAG,GADxB,WAC+BA,EAAkB,GAAG,GADpD,gBAKJtH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BC,MAAOsB,EAAQ,IACtD1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACnCX,EAAAC,EAAAC,cAACuF,EAAD,CAA6B3D,MAAO6E,EAAkB,OAG1D3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4CACVkH,EAAkB,GAAG,GAAGxB,OAD3B,UAGA7F,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+CACVoG,EAAiBc,EAAkB,MAGxCrH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2CACVmH,EAAkB,GAAG,GADxB,WAC+BA,EAAkB,GAAG,GADpD,gBAKJtH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAgCC,MAAOsB,EAAQ,IAC5D1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAACM,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACnCX,EAAAC,EAAAC,cAACuF,EAAD,CAA6B3D,MAAO6E,EAAkB,OAG1D3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kDACVwG,EAAkB,GAAG,GAAGd,OAD3B,UAGA7F,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qDACVoG,EAAiBc,EAAkB,MAGxCrH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iDACVmH,EAAkB,GAAG,GADxB,WAC+BA,EAAkB,GAAG,GADpD,0BC7QJG,UAAa,CACjBC,SAAS,EACTC,SAAU,MACVC,WAAW,EACXC,OAAQ,CACNC,UAAW,aAIMC,cACnB,SAAAA,EAAYjH,GAAO,IAAAmC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2E,GACjB9E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6E,GAAAxE,KAAAH,KAAMtC,IACNQ,QAAQC,IAAI,kCAAU0B,EAAKnC,OAC3BmC,EAAKO,MAAQ,CACXwE,KAAM,CACJC,SAAU,CACR,CACElH,KAAM,MACNmH,MAAO,qBACPF,KAAM/E,EAAKnC,MAAMwE,SAASK,IAAI,SAAAzD,GAC5B,OAAOA,EAAIyC,OAEbwD,MAAM,EACNC,gBAAiB,UACjBC,YAAa,UACbC,qBAAsB,UACtBC,iBAAkB,UAClBC,QAAS,WACTC,WAAY,CACVf,SAAS,EACTgB,MAAO,MACPC,OAAQ,MACRP,gBAAiB,UACjBC,YAAa,UACbO,aAAc,EACdC,YAAa,EACbxI,MAAO,YAGX,CACEU,KAAM,OACNmH,MAAO,eACPF,KAAM/E,EAAKnC,MAAMwE,SAASK,IAAI,SAAAzD,GAC5B,OAAOA,EAAIqC,OAEb4D,MAAM,EACNE,YAAa,UACbD,gBAAiB,UACjBU,iBAAkB,UAClBC,qBAAsB,UACtBC,0BAA2B,UAC3BC,sBAAuB,UACvBT,QAAS,WACTC,WAAY,CACVf,SAAS,EACTgB,MAAO,MACPC,OAAQ,MACRP,gBAAiB,UACjBC,YAAa,UACbO,aAAc,EACdC,YAAa,EACbxI,MAAO,WAKf6I,QAAS,CACPC,YAAY,EAEZC,SAAU,CACRC,KAAM,CACJlB,MAAM,IAGVmB,OAAQ,CACNC,MAAO,CACL,CACE7B,SAAS,EACT8B,MAAO,CACL1B,UAAW,UACX2B,SAAU,MAEZC,UAAW,CACThC,SAAS,GAEXG,OAAQ5E,EAAKnC,MAAMwE,SAASK,IAAI,SAAAzD,GAC9B,OAAqB,IAAjBA,EAAI0D,SACN,wBACS1D,EAAI0D,SAAW,GACxB,gBAAA7C,OAAab,EAAI0D,SAAjB,UAC0B,KAAjB1D,EAAI0D,SACb,gBAAA7C,OAAab,EAAI0D,SAAjB,UAEA,gBAAA7C,OAAab,EAAI0D,SAAW,GAA5B,cAKR+D,MAAO,CACL,CACE5I,KAAM,SACN2G,SAAS,EACTC,SAAU,OACViC,GAAI,WACJJ,MAAO,CACL1B,UAAW,UACX2B,SAAU,MAEZC,UAAW,CACThC,SAAS,GAEXG,OAAQ,CACNgC,MAAM,GAERC,WAAY,CACVpC,SAAS,EACTI,UAAW,UACX2B,SAAU,GACVM,YAAa,iBAGjB,CACEhJ,KAAM,SACN2G,SAAS,EACTC,SAAU,QACViC,GAAI,WACJJ,MAAO,CACLQ,aAAc,GACdC,aAAc,UAtHThH,wEA+HjB,IAAMO,EAAQJ,KAAKI,MACnB,OACExD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEC,MAAO,UAAW6J,UAAW,WAA1C,sEACAlK,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CAAKnC,KAAMxE,EAAMwE,KAAMkB,QAAS1F,EAAM0F,QAASkB,OAAQ3C,YApIpB3D,aCZ9BuG,UAAmB,eAAAvK,EAAAoD,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KAAG,SAAAC,EAAOC,EAAKC,GAAZ,IAAAC,EAAA3G,EAAA,OAAAsG,EAAAtK,EAAA4K,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACRC,EAAeP,EAAKC,GADZ,UAC3BC,EAD2BE,EAAAI,KAI7BjH,EAAU,OACVyG,GAAO,IAAMA,GAAO,IAAMC,GAAO,KAAOA,GAAO,KALlB,CAAAG,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAMfG,EAAST,EAAKC,GANC,OAM/B1G,EAN+B6G,EAAAI,KAAAJ,EAAAE,KAAA,iBAQ/B/G,EAAU2G,EAAWQ,KARU,eAAAN,EAAAO,OAAA,SAU1B,CACLpH,QAASA,EACT7B,YAAakJ,EAAaV,EAAWW,QAAQ,GAAG3B,IAChDrF,KAAMiH,KAAKC,MAAMb,EAAWc,KAAKnH,MACjCC,SAAUoG,EAAWc,KAAKlH,SAC1BC,UAAWmG,EAAWe,KAAKC,MAC3BlH,QAASkG,EAAWe,KAAKE,IAIzBzK,QAAkC,IAAzBwJ,EAAWkB,IAAI1K,QACxBC,OAAgC,IAAxBuJ,EAAWkB,IAAIzK,OACvBsD,KAAMiG,EAAWjG,OAtBc,yBAAAmG,EAAAiB,SAAAtB,MAAH,gBAAAuB,EAAAC,GAAA,OAAAnM,EAAAoM,MAAA9I,KAAA+I,YAAA,IA0BnBC,EAAiB,SAAA1J,GAC5B,IAAM2J,EAAW3J,EAAK4J,eAAe,SACrC,OAA2B,KAApBD,EAASjH,OAAgBiH,EAASE,OAAO,EAAG,IAAMF,EAASE,OAAO,EAAG,KAIjEC,EAAqB,eAAAC,EAAAvJ,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KAAG,SAAAkC,EAAOhC,EAAKC,GAAZ,IAAAgC,EAAAC,EAAA,OAAArC,EAAAtK,EAAA4K,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAAA6B,EAAA7B,KAAA,EACR8B,EAAiBpC,EAAKC,GADd,cAC7BgC,EAD6BE,EAAA3B,KAE7B0B,EAAOD,EAAaC,KAAKjH,IAAI,SAAAzD,GACjC,IAAMQ,EAAO,IAAIzB,KAAc,IAATiB,EAAI6K,IAC1B,MAAO,CACLA,GAAa,IAAT7K,EAAI6K,GACRC,SAAUtK,EAAKsE,WAAa,EAC5BnB,OAAQnD,EAAKuE,UACbrB,SAAUlD,EAAKE,WACfR,YAAakJ,EAAapJ,EAAIqJ,QAAQ,GAAG3B,IACzCrF,KAAMiH,KAAKC,MAAMvJ,EAAIwJ,KAAKnH,MAC1BI,UAAmBtC,IAAbH,EAAIyC,KAAqB,EAAIzC,EAAIyC,KAAK,SAXbkI,EAAAxB,OAAA,SAc5BuB,GAd4B,wBAAAC,EAAAd,SAAAW,MAAH,gBAAAO,EAAAC,GAAA,OAAAT,EAAAP,MAAA9I,KAAA+I,YAAA,GAkBrBgB,EAAgB,eAAAC,EAAAlK,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KAAG,SAAA6C,EAAO3C,EAAKC,GAAZ,IAAAC,EAAA3G,EAAA,OAAAsG,EAAAtK,EAAA4K,KAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EACLC,EAAeP,EAAKC,GADf,UACxBC,EADwB0C,EAAApC,KAE1BjH,EAAU,OACVyG,GAAO,IAAMA,GAAO,IAAMC,GAAO,KAAOA,GAAO,KAHrB,CAAA2C,EAAAtC,KAAA,gBAAAsC,EAAAtC,KAAA,EAIZG,EAAST,EAAKC,GAJF,OAI5B1G,EAJ4BqJ,EAAApC,KAAAoC,EAAAtC,KAAA,iBAM5B/G,EAAU2G,EAAWQ,KANO,eAAAkC,EAAAjC,OAAA,SAQvB,CACLpH,QAASA,EACTM,KAAMiH,KAAKC,MAAMb,EAAWc,KAAKnH,MACjCnC,YAAakJ,EAAaV,EAAWW,QAAQ,GAAG3B,IAChDxI,QAAkC,IAAzBwJ,EAAWkB,IAAI1K,QACxBC,OAAgC,IAAxBuJ,EAAWkB,IAAIzK,SAbK,yBAAAiM,EAAAvB,SAAAsB,MAAH,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAlB,MAAA9I,KAAA+I,YAAA,GAkBvBb,EAAe,SAAA1B,GACnB,GAAIA,GAAM,KAAOA,EAAK,IACpB,MAAO,eACF,GAAIA,GAAM,KAAOA,EAAK,IAC3B,MAAO,UACF,GAAIA,GAAM,KAAOA,EAAK,IAC3B,MAAO,OACF,GAAIA,GAAM,KAAOA,EAAK,IAC3B,MAAO,OACF,GAAIA,GAAM,KAAOA,EAAK,IAC3B,MAAO,aACF,GAAW,MAAPA,EACT,MAAO,QACF,GAAIA,EAAK,KAAOA,EAAK,IAC1B,MAAO,SAEP,MAAM,IAAI6D,MAAM,wDAIdtC,EAAQ,eAAAuC,EAAAxK,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KAAG,SAAAmD,EAAOjD,EAAKC,GAAZ,IAAA1G,EAAA,OAAAsG,EAAAtK,EAAA4K,KAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,cAAA4C,EAAA5C,KAAA,EACO6C,MAAK,+DAAA9K,OACsC4H,EADtC,OAAA5H,OAC+C2H,GACxE,CACEoD,QAAS,CACPC,cAAa,WAAAhL,OAAaiL,uCAI7BC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,UAAU,GAAGC,eAVnB,cACTpK,EADS2J,EAAA1C,KAAA0C,EAAAvC,OAAA,SAWRpH,GAXQ,wBAAA2J,EAAA7B,SAAA4B,MAAH,gBAAAW,EAAAC,GAAA,OAAAb,EAAAxB,MAAA9I,KAAA+I,YAAA,GAcRlB,EAAc,eAAAuD,EAAAtL,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KAAG,SAAAiE,EAAO/D,EAAKC,GAAZ,IAAAY,EAAA,OAAAhB,EAAAtK,EAAA4K,KAAA,SAAA6D,GAAA,cAAAA,EAAA3D,KAAA2D,EAAA1D,MAAA,cAAA0D,EAAA1D,KAAA,EACC6C,MAAK,uDAAA9K,OAC8B2H,EAD9B,SAAA3H,OACyC4H,EADzC,WAAA5H,OAEvBiL,mCAFuB,kBAIzBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SALP,cACf5C,EADemD,EAAAxD,KAAAwD,EAAArD,OAAA,SAMdE,GANc,wBAAAmD,EAAA3C,SAAA0C,MAAH,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAtC,MAAA9I,KAAA+I,YAAA,GAUdW,EAAgB,eAAA+B,EAAA3L,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KAAG,SAAAsE,EAAOpE,EAAKC,GAAZ,IAAAY,EAAA,OAAAhB,EAAAtK,EAAA4K,KAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,cAAA+D,EAAA/D,KAAA,EACD6C,MAAK,wDAAA9K,OAC+B2H,EAD/B,SAAA3H,OAC0C4H,EAD1C,WAAA5H,OAEvBiL,mCAFuB,kBAIzBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SALL,cACjB5C,EADiBwD,EAAA7D,KAAA6D,EAAA1D,OAAA,SAMhBE,GANgB,wBAAAwD,EAAAhD,SAAA+C,MAAH,gBAAAE,EAAAC,GAAA,OAAAJ,EAAA3C,MAAA9I,KAAA+I,YAAA,GCrGhB+C,EAAa,IAAIjO,KACjBkO,EAAS,CACb,CACExE,IAAK,IACLD,IAAK,UACLzG,QAAS,gBAEX,CACE0G,IAAK,WACLD,IAAK,UACLzG,QAAS,gBAEX,CACE0G,IAAK,WACLD,IAAK,UACLzG,QAAS,gBAEX,CACE0G,IAAK,WACLD,IAAK,UACLzG,QAAS,gBAEX,CACE0G,IAAK,WACLD,IAAK,UACLzG,QAAS,gBAEX,CACE0G,IAAK,WACLD,IAAK,UACLzG,QAAS,gBAEX,CACE0G,IAAK,WACLD,IAAK,UACLzG,QAAS,gBAEX,CACE0G,IAAK,WACLD,IAAK,SACLzG,QAAS,iBAsBQmL,6MACnB5L,MAAQ,CACN6L,UAAU,EACVzK,KAAMwH,EAAe8C,GACrBI,MAAO,KACPC,KAAM,GACNC,UAAW,sFAGO,IAAAC,EAAArM,KAElBsM,UAAUC,YAAYC,mBAAtB,eAAA9P,EAAAoD,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KACE,SAAAC,EAAM9C,GAAN,IAAAzC,EAAAhD,EAAA,OAAAqI,EAAAtK,EAAA4K,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACW9F,EAAQ,EADnB,YACsBA,EAAQ,GAD9B,CAAA4F,EAAAE,KAAA,YAEQ9I,EAAM,KACI,IAAVgD,EAHR,CAAA4F,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAIkBmC,EAAiBxF,EAASwH,OAAOU,SAAUlI,EAASwH,OAAOW,WAJ7E,OAIM5N,EAJN4I,EAAAI,KAKMuE,EAAKM,SAAS,CACZR,KAAM,CACJ,CACE7E,IAAK/C,EAASwH,OAAOU,SACrBlF,IAAKhD,EAASwH,OAAOW,UACrB7L,QAAS/B,EAAI+B,QACb+L,WAAY,4BACZzL,KAAMrC,EAAIqC,KACVxD,KAAMmB,EAAIE,YACVhB,QAASc,EAAId,QACbC,OAAQa,EAAIb,WAfxByJ,EAAAE,KAAA,oBAmByB,IAAV9F,EAnBf,CAAA4F,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GAoBkBmC,EAAiBgC,EAAOjK,EAAQ,GAAGwF,IAAKyE,EAAOjK,EAAQ,GAAGyF,KApB5E,QAoBMzI,EApBN4I,EAAAI,KAqBMuE,EAAKM,SAAS,CACZR,KAAI,GAAAxM,OAAAG,OAAA+M,EAAA,EAAA/M,CACCuM,EAAKjM,MAAM+L,MADZ,CAEF,CACE7E,IAAKyE,EAAOjK,EAAQ,GAAGwF,IACvBC,IAAKwE,EAAOjK,EAAQ,GAAGyF,IACvB1G,QAASkL,EAAOjK,EAAQ,GAAGjB,QAC3B+L,WAAY,2BACZzL,KAAMrC,EAAIqC,KACVxD,KAAMmB,EAAIE,YACVhB,QAASc,EAAId,QACbC,OAAQa,EAAIb,UAGhBgO,UAAU,IAnClBvE,EAAAE,KAAA,wBAAAF,EAAAE,KAAA,GAsCkBmC,EAAiBgC,EAAOjK,EAAQ,GAAGwF,IAAKyE,EAAOjK,EAAQ,GAAGyF,KAtC5E,QAsCMzI,EAtCN4I,EAAAI,KAuCMuE,EAAKM,SAAS,CACZR,KAAI,GAAAxM,OAAAG,OAAA+M,EAAA,EAAA/M,CACCuM,EAAKjM,MAAM+L,MADZ,CAEF,CACE7E,IAAKyE,EAAOjK,EAAQ,GAAGwF,IACvBC,IAAKwE,EAAOjK,EAAQ,GAAGyF,IACvB1G,QAASkL,EAAOjK,EAAQ,GAAGjB,QAC3B+L,WAAY,2BACZzL,KAAMrC,EAAIqC,KACVxD,KAAMmB,EAAIE,YACVhB,QAASc,EAAId,QACbC,OAAQa,EAAIb,YAlDxB,QACiC6D,IADjC4F,EAAAE,KAAA,iCAAAF,EAAAiB,SAAAtB,MADF,gBAAAuB,GAAA,OAAAlM,EAAAoM,MAAA9I,KAAA+I,YAAA,GA0DE,SAAAmD,GACEG,EAAKM,SAAS,CACZT,MAAOA,uCAOb,IAAM9L,EAAQJ,KAAKI,MACnB,OACExD,EAAAC,EAAAC,cAAA,WACGsD,EAAM6L,SACLrP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACgQ,EAAD,CAAYnQ,QAASyD,EAAMoB,OAtGtB,SAAAc,GACf,IAAMyK,EAAYzK,EAAIC,IAAI,SAAAzD,GACxB,OACElC,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAASkM,IAAG,GAAArN,OAAKb,EAAIwI,IAAT,KAAA3H,OAAgBb,EAAIyI,KAAOvG,GAAE,YAAArB,OAAcb,EAAIwI,IAAlB,KAAA3H,OAAyBb,EAAIyI,KAAOxK,UAAU,QACrFH,EAAAC,EAAAC,cAACmQ,EAAD,CACED,IAAG,GAAArN,OAAKb,EAAIwI,IAAT,KAAA3H,OAAgBb,EAAIyI,KACvBhH,cAAezB,EAAI+B,QACnBL,YAAa1B,EAAI8N,WACjB5N,YAAaF,EAAInB,KACjB8C,YAAa3B,EAAIqC,KACjBnD,QAASc,EAAId,QACbC,OAAQa,EAAIb,YAKpB,OAAOrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYgQ,GAuFvBG,CAAS9M,EAAM+L,OAShB/L,EAAM8L,MACRtP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACgQ,EAAD,CAAYnQ,QAASyD,EAAMoB,OAC3B5E,EAAAC,EAAAC,cAACqQ,EAAD,OAGFvQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACgQ,EAAD,CAAYnQ,QAASyD,EAAMoB,OAC3B5E,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAE8J,UAAW,SAAU7J,MAAO,QAASmQ,OAAQ,SAAzD,kCArGsB1M,aC5D5B2M,WAAc,eAAA3Q,EAAAoD,OAAAoH,EAAA,EAAApH,CAAAqH,EAAAtK,EAAAuK,KAAG,SAAAC,EAAOC,EAAKC,GAAZ,IAAA+F,EAAAC,EAAA,OAAApG,EAAAtK,EAAA4K,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIX,EAAoBK,EAAKC,GAD7B,cACf+F,EADe5F,EAAAI,KAAAJ,EAAAE,KAAA,EAEKwB,EAAsB9B,EAAKC,GAFhC,cAEfgG,EAFe7F,EAAAI,KAAAJ,EAAAO,OAAA,SAGd,CACLqF,WAAY,CACVzM,QAASyM,EAAWzM,QACpB7B,YAAasO,EAAWtO,YACxBmC,KAAMmM,EAAWnM,KACjBC,SAAUkM,EAAWlM,SACrBC,UAAWiM,EAAWjM,UACtBC,QAASgM,EAAWhM,QACpBtD,QAASsP,EAAWtP,QACpBC,OAAQqP,EAAWrP,OACnBsD,KAAM+L,EAAW/L,MAEnBgM,gBAfmB,wBAAA7F,EAAAiB,SAAAtB,MAAH,gBAAAuB,EAAAC,GAAA,OAAAnM,EAAAoM,MAAA9I,KAAA+I,YAAA,IAmBd+C,GAAa,IAAIjO,KACjB2P,GAAO1B,GAAW2B,cAClBC,GAAQ5B,GAAWlI,WACnBX,GAAM6I,GAAWjI,UAAY,EAC7BtE,GAAQuM,GAAWtM,WACnBmO,GAAS7B,GAAWpM,aACpBkO,GAAU,IAAI/P,KAAK2P,GAAME,GAAOzK,GAAK1D,GAAOoO,IAC7BE,8MACnBzN,MAAQ,CACN6L,UAAU,EACVzK,KAAMwH,EAAe8C,IACrBI,MAAO,KACP4B,QAAS,yFAGS,IAAAzB,EAAArM,KAClBqN,GAAerN,KAAKtC,MAAMqQ,MAAMC,OAAO1G,IAAKtH,KAAKtC,MAAMqQ,MAAMC,OAAOzG,KAAKsD,KAAK,SAAAoD,GAAG,OAC/E5B,EAAKM,SAAS,CACZmB,QAASG,EAAIX,WACbY,aAAcD,EAAIV,YAClBtB,UAAU,uCAMd,IAAM7L,EAAQJ,KAAKI,MACnB,OACExD,EAAAC,EAAAC,cAAA,WACGsD,EAAM6L,SACLrP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACqR,EAAD,CAAgBtN,QAAST,EAAM0N,QAAQjN,QAASlE,QAASyD,EAAMoB,OAC/D5E,EAAAC,EAAAC,cAACsR,EAAD,CACEpP,YAAaoB,EAAM0N,QAAQ9O,YAC3BmC,KAAMf,EAAM0N,QAAQ3M,KACpBC,SAAUhB,EAAM0N,QAAQ1M,SACxBC,UAAWjB,EAAM0N,QAAQzM,UACzBC,QAASlB,EAAM0N,QAAQxM,QACvBtD,QAASoC,EAAM0N,QAAQ9P,QACvBC,OAAQmC,EAAM0N,QAAQ7P,OACtBsD,KAAMnB,EAAM0N,QAAQvM,KACpBC,KAAMpB,EAAMoB,OAEd5E,EAAAC,EAAAC,cAACuR,EAAD,CAAkB1M,KAAK,sBAAO3C,YAAaoB,EAAM8N,aAAa,GAAGlP,cACjEpC,EAAAC,EAAAC,cAACwR,EAAD,CACEpM,SAAU9B,EAAM8N,aAAalK,OAAO,SAAAlF,GAClC,OAAOA,EAAI6K,IAAMiE,KAEnB5P,QAASoC,EAAM0N,QAAQ9P,QACvBC,OAAQmC,EAAM0N,QAAQ7P,SAExBrB,EAAAC,EAAAC,cAACuR,EAAD,CAAkB1M,KAAK,uBAAQ3C,YAAa,KAC5CpC,EAAAC,EAAAC,cAACyR,EAAD,CAAmBrM,SAAU9B,EAAM8N,aAAc5K,MAAOwI,KACxDlP,EAAAC,EAAAC,cAAC0R,EAAD,CACEtM,SAAU9B,EAAM8N,aAAalK,OAAO,SAAA1G,GAClC,OAAOA,EAAMqM,IAAMiE,QAKzBhR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACqR,EAAD,CAAgBtN,QAAQ,GAAGlE,QAASyD,EAAMoB,OAC1C5E,EAAAC,EAAAC,cAAA,KACEE,MAAO,CACL8J,UAAW,SACX7J,MAAO,QACPmQ,OAAQ,OACRqB,SAAU,sBALd,kCAvD0B/N,aC5BvBgO,GATC,WACd,OACE9R,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,MAAO,QAASmQ,OAAQ,SACpCxQ,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAE8J,UAAW,WAAvB,0EACAlK,EAAAC,EAAAC,cAAC0R,EAAD,QCWSG,oLAZX,OACE/R,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8R,EAAA,EAAD,KACEhS,EAAAC,EAAAC,cAAC8R,EAAA,EAAD,CAAO7N,OAAK,EAAC8N,KAAK,IAAIC,UAAW9C,IACjCpP,EAAAC,EAAAC,cAAC8R,EAAA,EAAD,CAAOC,KAAK,sBAAsBC,UAAWjB,KAC7CjR,EAAAC,EAAAC,cAAC8R,EAAA,EAAD,CAAOE,UAAWJ,cAPVhO,aCQHqO,GARF,WACX,OACEnS,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAekO,SAAUpE,yBACvBhO,EAAAC,EAAAC,cAACmS,GAAD,QCKAC,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DAsCN,SAASwB,GAAgBC,EAAOC,GAC9BnD,UAAUoD,cACPC,SAASH,GACT3E,KAAK,SAAA+E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1P,QACfkM,UAAUoD,cAAcO,YAI1B/R,QAAQC,IACN,iHAKEsR,GAAUA,EAAOS,UACnBT,EAAOS,SAASN,KAMlB1R,QAAQC,IAAI,sCAGRsR,GAAUA,EAAOU,WACnBV,EAAOU,UAAUP,UAO5BQ,MAAM,SAAAlE,GACLhO,QAAQgO,MAAM,4CAA6CA,KC1FjEmE,IAASC,OAAO1T,EAAAC,EAAAC,cAACyT,GAAD,MAAUC,SAASC,eAAe,SDgB3C,SAAkBhB,GACvB,GAA6C,kBAAmBnD,UAAW,CAGzE,GADkB,IAAIoE,IAAI9F,wBAAwBwE,OAAOC,SAASnS,MACpDyT,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAA7P,OAAMiL,wBAAN,sBAEPsE,IAgEV,SAAiCM,EAAOC,GAEtChF,MAAM+E,GACH3E,KAAK,SAAAC,GAEJ,IAAM+F,EAAc/F,EAASJ,QAAQoG,IAAI,gBAEnB,MAApBhG,EAASiG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1E,UAAUoD,cAAcuB,MAAMpG,KAAK,SAAA+E,GACjCA,EAAasB,aAAarG,KAAK,WAC7BuE,OAAOC,SAAS8B,aAKpB5B,GAAgBC,EAAOC,KAG1BW,MAAM,WACLlS,QAAQC,IACN,mEArFAiT,CAAwB5B,EAAOC,GAI/BnD,UAAUoD,cAAcuB,MAAMpG,KAAK,WACjC3M,QAAQC,IACN,gHAMJoR,GAAgBC,EAAOC,MCvC/BC","file":"static/js/main.f919d935.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { IconContext } from 'react-icons';\r\nimport { MdLocationOn } from 'react-icons/md';\r\n\r\nimport './MainHeader.scss';\r\n\r\nconst MainHeader = ({ nowTime }) => {\r\n  return (\r\n    <div className='MainHeader' style={{ color: 'white' }}>\r\n      <a href='/' style={{ textDecoration: 'none' }}>\r\n        <IconContext.Provider value={{ size: '2em', color: 'white' }}>\r\n          <MdLocationOn />\r\n        </IconContext.Provider>\r\n      </a>\r\n      <p className='MainHeader_text'>위치</p>\r\n      <p className='MainHeader_time'>{nowTime}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainHeader;\r\n","import React from 'react';\r\n\r\nimport {\r\n  WiThunderstorm,\r\n  WiSleet,\r\n  WiRaindrops,\r\n  WiSnow,\r\n  WiDayHaze,\r\n  WiNightFog,\r\n  WiDaySunny,\r\n  WiNightClear,\r\n  WiCloud\r\n} from 'react-icons/wi';\r\nimport { FaExclamationTriangle } from 'react-icons/fa';\r\n\r\n// 날씨에 맞는 아이콘 내보내기\r\nexport const WeatherTypeIconWithHours = props => {\r\n  const type = props.type;\r\n  const timeInMs = Date.now();\r\n  if (type === 'Thunderstorm') {\r\n    return <WiThunderstorm />;\r\n  } else if (type === 'Drizzle') {\r\n    return <WiSleet />;\r\n  } else if (type === 'Rain') {\r\n    return <WiRaindrops />;\r\n  } else if (type === 'Snow') {\r\n    return <WiSnow />;\r\n  } else if (type === 'Atmosphere') {\r\n    if (timeInMs >= props.sunrise && timeInMs <= props.sunset) {\r\n      return <WiDayHaze />;\r\n    } else {\r\n      return <WiNightFog />;\r\n    }\r\n  } else if (type === 'Clear') {\r\n    if (timeInMs >= props.sunrise && timeInMs <= props.sunset) {\r\n      return <WiDaySunny />;\r\n    } else {\r\n      return <WiNightClear />;\r\n    }\r\n  } else if (type === 'Clouds') {\r\n    return <WiCloud />;\r\n  } else {\r\n    console.log('아이콘 에러인데요??');\r\n    return <FaExclamationTriangle />;\r\n  }\r\n};\r\n\r\n// 날씨에 맞는 카드 및 글씨 색 내보내기\r\nexport const WeatherTypeColorWithHours = (type, sunrise, sunset) => {\r\n  const timeInMs = Date.now();\r\n  if (type === 'Thunderstorm') {\r\n    return {\r\n      bgColor: '#8D23A9',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 0.5px 0.2px #5b0079'\r\n    };\r\n  } else if (type === 'Drizzle') {\r\n    return {\r\n      bgColor: '#7da9ff',\r\n      textColor: '#333',\r\n      shadow: '0 1px 6px #467acb'\r\n    };\r\n  } else if (type === 'Rain') {\r\n    return {\r\n      bgColor: '#457AD1',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 1px 6px #004f9f'\r\n    };\r\n  } else if (type === 'Snow') {\r\n    return {\r\n      bgColor: '#FAFAFC',\r\n      textColor: '#333',\r\n      shadow: '0 1px 6px #c7c7c9'\r\n    };\r\n  } else if (type === 'Atmosphere') {\r\n    return {\r\n      bgColor: '#b9c2d0',\r\n      textColor: '#333',\r\n      shadow: '0 1px 6px #89929f'\r\n    };\r\n  } else if (type === 'Clear') {\r\n    if (timeInMs >= sunrise && timeInMs <= sunset) {\r\n      return {\r\n        bgColor: '#f8bc25',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #c08c00'\r\n      };\r\n    } else {\r\n      return {\r\n        bgColor: '#575d80',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #2c3453'\r\n      };\r\n    }\r\n  } else if (type === 'Clouds') {\r\n    return {\r\n      bgColor: '#89929f',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 1px 6px #5c6471'\r\n    };\r\n  } else {\r\n    console.log('색 변경 에러인데요??');\r\n    return {\r\n      bgColor: '#EE5E5E',\r\n      textColor: '#f1f1f1',\r\n      shadow: '0 1px 6px #b62a34'\r\n    };\r\n  }\r\n};\r\n\r\nexport const WeatherTypeIconWithForecast = ({ array }) => {\r\n  const findArr = ['Rain', 'Drizzle', 'Thunderstorm', 'Snow'];\r\n\r\n  const findWeatherType = array.find(obj => {\r\n    return findArr.includes(obj.weatherType);\r\n  });\r\n  if (findWeatherType === undefined) {\r\n    if (array[0].weatherType === 'Atmosphere') {\r\n      return <WiDayHaze />;\r\n    } else if (array[0].weatherType === 'Clear') {\r\n      return <WiDaySunny />;\r\n    } else if (array[0].weatherType === 'Clouds') {\r\n      return <WiCloud />;\r\n    } else {\r\n      console.log('아이콘 에러인데요??');\r\n      return <FaExclamationTriangle />;\r\n    }\r\n  } else {\r\n    if (findWeatherType.weatherType === 'Thunderstorm') {\r\n      return <WiThunderstorm />;\r\n    } else if (findWeatherType.weatherType === 'Drizzle') {\r\n      return <WiSleet />;\r\n    } else if (findWeatherType.weatherType === 'Rain') {\r\n      return <WiRaindrops />;\r\n    } else if (findWeatherType.weatherType === 'Snow') {\r\n      return <WiSnow />;\r\n    } else {\r\n      console.log('아이콘 에러인데요??');\r\n      return <FaExclamationTriangle />;\r\n    }\r\n  }\r\n};\r\n\r\nexport const WeatherTypeColorWithForecast = array => {\r\n  const findArr = ['Rain', 'Drizzle', 'Thunderstorm', 'Snow'];\r\n  const findWeatherType = array.find(obj => {\r\n    return findArr.includes(obj.weatherType);\r\n  });\r\n  if (findWeatherType === undefined) {\r\n    if (array[0].weatherType === 'Atmosphere') {\r\n      return {\r\n        bgColor: '#b9c2d0',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #89929f'\r\n      };\r\n    } else if (array[0].weatherType === 'Clear') {\r\n      return {\r\n        bgColor: '#f8bc25',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #c08c00'\r\n      };\r\n    } else if (array[0].weatherType === 'Clouds') {\r\n      return {\r\n        bgColor: '#89929f',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #5c6471'\r\n      };\r\n    } else {\r\n      console.log('색 변경 에러인데요??');\r\n      return {\r\n        bgColor: '#EE5E5E',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #b62a34'\r\n      };\r\n    }\r\n  } else {\r\n    if (findWeatherType.weatherType === 'Thunderstorm') {\r\n      return {\r\n        bgColor: '#8D23A9',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 0.5px 0.2px #5b0079'\r\n      };\r\n    } else if (findWeatherType.weatherType === 'Drizzle') {\r\n      return {\r\n        bgColor: '#7da9ff',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #467acb'\r\n      };\r\n    } else if (findWeatherType.weatherType === 'Rain') {\r\n      return {\r\n        bgColor: '#457AD1',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #004f9f'\r\n      };\r\n    } else if (findWeatherType.weatherType === 'Snow') {\r\n      return {\r\n        bgColor: '#FAFAFC',\r\n        textColor: '#333',\r\n        shadow: '0 1px 6px #c7c7c9'\r\n      };\r\n    } else {\r\n      console.log('색 변경 에러인데요??');\r\n      return {\r\n        bgColor: '#EE5E5E',\r\n        textColor: '#f1f1f1',\r\n        shadow: '0 1px 6px #b62a34'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// 날씨 텍스트 한글 변경\r\nexport const WeatherTypeText = type => {\r\n  if (type === 'Thunderstorm') {\r\n    return '뇌우';\r\n  } else if (type === 'Drizzle') {\r\n    return '이슬비';\r\n  } else if (type === 'Rain') {\r\n    return '비';\r\n  } else if (type === 'Snow') {\r\n    return '눈';\r\n  } else if (type === 'Atmosphere') {\r\n    return '안개';\r\n  } else if (type === 'Clear') {\r\n    return '맑음';\r\n  } else if (type === 'Clouds') {\r\n    return '흐림';\r\n  } else {\r\n    console.log('날씨 텍스트 에러인데요??');\r\n    return '알수 없음';\r\n  }\r\n};\r\n\r\n// 바람 방향 숫자 -> 한글 변경\r\n// N 348.75 - 11.25\r\n// NNE 11.25 - 33.75\r\n// NE 33.75 - 56.25\r\n// ENE 56.25 - 78.75\r\n// E 78.75 - 101.25\r\n// ESE 101.25 - 123.75\r\n// SE 123.75 - 146.25\r\n// SSE 146.25 - 168.75\r\n// S 168.75 - 191.25\r\n// SSW 191.25 - 213.75\r\n// SW 213.75 - 236.25\r\n// WSW 236.25 - 258.75\r\n// W 258.75 - 281.25\r\n// WNW 281.25 - 303.75\r\n// NW 303.75 - 326.25\r\n// NNW 326.25 - 348.75\r\nexport const WindDegreeToText = degree => {\r\n  if (degree >= 11.25 && degree < 33.75) {\r\n    return '북북동';\r\n  } else if (degree >= 33.75 && degree < 56.25) {\r\n    return '북동';\r\n  } else if (degree >= 56.25 && degree < 78.75) {\r\n    return '동북동';\r\n  } else if (degree >= 78.75 && degree < 101.25) {\r\n    return '동';\r\n  } else if (degree >= 101.25 && degree < 123.75) {\r\n    return '동남동';\r\n  } else if (degree >= 123.75 && degree < 146.25) {\r\n    return '남동';\r\n  } else if (degree >= 146.25 && degree < 168.75) {\r\n    return '남남동';\r\n  } else if (degree >= 168.75 && degree < 191.25) {\r\n    return '남';\r\n  } else if (degree >= 191.25 && degree < 213.75) {\r\n    return '남남서';\r\n  } else if (degree >= 213.75 && degree < 236.25) {\r\n    return '남서';\r\n  } else if (degree >= 236.25 && degree < 258.75) {\r\n    return '서남서';\r\n  } else if (degree >= 258.75 && degree < 281.25) {\r\n    return '서';\r\n  } else if (degree >= 281.25 && degree < 303.75) {\r\n    return '서북서';\r\n  } else if (degree >= 303.75 && degree < 326.25) {\r\n    return '북서';\r\n  } else if (degree >= 326.25 && degree < 348.75) {\r\n    return '북북서';\r\n  } else if ((degree >= 348.75 && degree < 361) || (degree >= 0 && degree < 11.25)) {\r\n    return '북';\r\n  } else {\r\n    console.log('바람 값이 이상한데요?');\r\n    return '-';\r\n  }\r\n};\r\n\r\n// sunrise 및 sunset 시간 변경\r\nexport const millisecondsToTime = ms => {\r\n  const date = new Date(ms);\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  return `${hours < 10 ? `0${hours}` : hours}:${minutes < 10 ? `0${minutes}` : minutes}`;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport { IconContext } from 'react-icons';\r\n\r\nimport {\r\n  WeatherTypeIconWithHours,\r\n  WeatherTypeColorWithHours\r\n} from '../functions/changeWeatherData';\r\n\r\nimport './MainPlacesCard.scss';\r\n\r\n// TODO: constructor 사용시 문제점 확인\r\nexport default class MainPlacesCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = WeatherTypeColorWithHours(props.weatherType, props.sunrise, props.sunset);\r\n  }\r\n\r\n  render() {\r\n    const bgColor = {\r\n      background: this.state.bgColor,\r\n      color: this.state.textColor\r\n    };\r\n    return (\r\n      <div className='place_card' style={bgColor}>\r\n        <div className='place_card_left'>\r\n          <IconContext.Provider value={{ size: '4em' }}>\r\n            <WeatherTypeIconWithHours\r\n              type={this.props.weatherType}\r\n              sunrise={this.props.sunrise}\r\n              sunset={this.props.sunset}\r\n            />\r\n          </IconContext.Provider>\r\n          <p className='location_title'>{this.props.locationTitle}</p>\r\n          <p className='location_sub'>{this.props.locationSub}</p>\r\n        </div>\r\n        <div className='place_card_right'>\r\n          <p className='temperature'>{this.props.temperature}˚</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { IconContext } from 'react-icons';\r\nimport { FaExclamationTriangle } from 'react-icons/fa';\r\n\r\nimport './MainPlacesCard.scss';\r\n\r\nexport default class MainErrorCard extends Component {\r\n  render() {\r\n    return (\r\n      <div className='place_card' style={{ background: '#EE5E5E' }}>\r\n        <div className='place_card_errorIcon'>\r\n          <IconContext.Provider value={{ size: '3.5em', color: '#f1f1f1' }}>\r\n            <FaExclamationTriangle />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='place_card_errorText'>\r\n          <p className='error_title'>현재 위치를 확인할 수 없습니다.</p>\r\n          <p className='error_sub'>위치 정보를 허용해주세요.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdKeyboardBackspace } from 'react-icons/md';\r\n\r\nimport './ForecastHeader.scss';\r\n\r\nconst ForecastHeader = ({ address, nowTime }) => {\r\n  return (\r\n    <div className='ForecastHeader' style={{ color: 'white' }}>\r\n      <NavLink exact to='/'>\r\n        <IconContext.Provider value={{ size: '2em', color: 'white' }}>\r\n          <MdKeyboardBackspace />\r\n        </IconContext.Provider>\r\n      </NavLink>\r\n      <p className='ForecastHeader_text'>{address}</p>\r\n      <p className='ForecastHeader_time'>{nowTime}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastHeader;\r\n","import React from 'react';\r\n\r\n// Icon 설정 파일\r\nimport { IconContext } from 'react-icons';\r\n// 날씨에 맞는 아이콘 가져오기\r\nimport { WiRain, WiHumidity, WiStrongWind, WiSunrise, WiSunset } from 'react-icons/wi';\r\n// 디자인 circle 가져오기\r\nimport { FaCircle } from 'react-icons/fa';\r\n\r\n// 날씨데이터에 따른 데이터 가공 함수 모음\r\nimport {\r\n  WeatherTypeIconWithHours,\r\n  WeatherTypeColorWithHours,\r\n  WeatherTypeText,\r\n  WindDegreeToText,\r\n  millisecondsToTime\r\n} from '../functions/changeWeatherData';\r\n\r\n// css\r\nimport './ForecastNowcard.scss';\r\n\r\nconst ForecastNowcard = ({\r\n  weatherType,\r\n  temp,\r\n  humidity,\r\n  windSpeed,\r\n  windDeg,\r\n  sunrise,\r\n  sunset,\r\n  rain,\r\n  time\r\n}) => {\r\n  const style = WeatherTypeColorWithHours(weatherType, sunrise, sunset);\r\n  const bgColor = {\r\n    background: style.bgColor,\r\n    color: style.textColor\r\n  };\r\n  const shadow = {\r\n    boxShadow: style.shadow\r\n  };\r\n  return (\r\n    <div className='forecast_card_now' style={bgColor}>\r\n      <div className='forecast_card_now_Top' style={shadow}>\r\n        {/* 아이콘 */}\r\n        <div className='forecast_card_now_Top_left'>\r\n          <IconContext.Provider value={{ size: '4em' }}>\r\n            <WeatherTypeIconWithHours type={weatherType} sunrise={sunrise} sunset={sunset} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        {/* 날씨 */}\r\n        <div className='forecast_card_now_Top_center'>\r\n          <p className='timeTitle'>지금</p>\r\n          <p className='weatherTitle'>{WeatherTypeText(weatherType)}</p>\r\n        </div>\r\n        {/* 온도 */}\r\n        <div className='forecast_card_now_Top_right'>\r\n          <p className='temperatureTitle'>{temp}˚</p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_now_Bottom'>\r\n        {/* 비온다면 강수량, 비가 안오면 습도 표시*/}\r\n        {weatherType === 'Rain' || weatherType === 'Drizzle' ? (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiRain />\r\n            </IconContext.Provider>\r\n            <p className='numberText1'>{rain === undefined ? 0 : rain['1h']} mm</p>\r\n            <p className='subText1'>강수량</p>\r\n          </div>\r\n        ) : weatherType === 'Snow' ? (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiHumidity />\r\n            </IconContext.Provider>\r\n            <p className='numberText1'>{humidity} %</p>\r\n            <p className='subText1'>습도</p>\r\n          </div>\r\n        ) : (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiHumidity />\r\n            </IconContext.Provider>\r\n            <p className='numberText1'>{humidity} %</p>\r\n            <p className='subText1'>습도</p>\r\n          </div>\r\n        )}\r\n        <div className='forecast_card_now_Bottom_item'>\r\n          <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n            <WiStrongWind />\r\n          </IconContext.Provider>\r\n          <p className='numberText2'>{windSpeed} m/s</p>\r\n          <p className='subText2'>{WindDegreeToText(windDeg)}</p>\r\n        </div>\r\n        {time >= sunrise && time <= sunset ? (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiSunset />\r\n            </IconContext.Provider>\r\n            <p className='numberText3'>{millisecondsToTime(sunset)}</p>\r\n            <p className='subText3'>일몰</p>\r\n          </div>\r\n        ) : (\r\n          <div className='forecast_card_now_Bottom_item'>\r\n            <IconContext.Provider value={{ size: '2.5em', className: 'nowBottom_icon' }}>\r\n              <WiSunrise />\r\n            </IconContext.Provider>\r\n            <p className='numberText3'>{millisecondsToTime(sunrise)}</p>\r\n            <p className='subText3'>일출</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_now_bottomcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastNowcard;\r\n","import React from 'react';\r\n\r\n// css\r\nimport './ForecastLinecard.scss';\r\n\r\nimport { WeatherTypeText } from '../functions/changeWeatherData';\r\n\r\nconst ForecastLinecard = ({ text, weatherType }) => {\r\n  return (\r\n    <div className='forecast_lineCard'>\r\n      <div className='forecast_lineCard_line' />\r\n      <div className='forecast_lineCard_left' />\r\n      {text === '잠시 후' ? (\r\n        <div className='forecast_lineCard_right'>\r\n          <p className='nextTimeTitle'>{text}</p>\r\n          <p className='nextWeatherTitle'>{WeatherTypeText(weatherType)}</p>\r\n        </div>\r\n      ) : (\r\n        <div className='forecast_lineCard_right'>\r\n          <p className='nextTimeTitle'>{text}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastLinecard;\r\n","import React from 'react';\r\n\r\n// Icon 설정 파일\r\nimport { IconContext } from 'react-icons';\r\n// 디자인 circle 가져오기\r\nimport { FaCircle } from 'react-icons/fa';\r\n\r\n// 날씨데이터에 따른 데이터 가공 함수 모음\r\nimport {\r\n  WeatherTypeText,\r\n  WeatherTypeIconWithForecast,\r\n  WeatherTypeColorWithForecast\r\n} from '../functions/changeWeatherData';\r\n\r\nimport './ForecastNext24.scss';\r\n\r\n// 다음 24시간의 날씨 변화를 감지해서 날씨가 바뀔 때만 array 에 저장\r\nconst forecastReducer = (accumulator, value, index, array) => {\r\n  if (accumulator[0] === undefined) {\r\n    accumulator.push(value);\r\n  } else if (accumulator[accumulator.length - 1].weatherType !== value.weatherType) {\r\n    accumulator.push(value);\r\n  }\r\n  return accumulator;\r\n};\r\n\r\n// 24시간동안 감지된 날씨 변화를 텍스트로 바꾸기\r\nconst next24Textloop = arr => {\r\n  console.log(arr);\r\n  if (arr.length === 1) {\r\n    return WeatherTypeText(arr[0].weatherType);\r\n  } else if (arr.length === 2) {\r\n    return arr\r\n      .map((value, index) => {\r\n        if (index === 0) {\r\n          return WeatherTypeText(value.weatherType);\r\n        } else {\r\n          if (value.dt_hours === 0) {\r\n            return ` 내일 오전 12시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          } else if (value.dt_hours < 12) {\r\n            return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} 오전 ${\r\n              value.dt_hours\r\n            }시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          } else if (value.dt_hours === 12) {\r\n            return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} 오후 ${\r\n              value.dt_hours\r\n            }시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          } else {\r\n            return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} 오후 ${value.dt_hours -\r\n              12}시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          }\r\n        }\r\n      })\r\n      .toString();\r\n  } else if (arr.length === 3) {\r\n    const weatherText1 = WeatherTypeText(arr[0].weatherType);\r\n    let weatherText2, weatherText3, twoPeriods2;\r\n    if (arr[1].dt_hours === 0) {\r\n      weatherText2 = ` 내일 오전 12시 ~`;\r\n      twoPeriods2 = '오전';\r\n    } else if (arr[1].dt_hours < 12) {\r\n      weatherText2 = `${arr[1].dt_day !== arr[0].dt_day ? ` 내일` : ``} 오전 ${\r\n        arr[1].dt_hours\r\n      }시 ~`;\r\n      twoPeriods2 = '오전';\r\n    } else if (arr[1].dt_hours === 12) {\r\n      weatherText2 = `${arr[1].dt_day !== arr[0].dt_day ? ` 내일` : ``} 오후 ${\r\n        arr[1].dt_hours\r\n      }시 ~`;\r\n      twoPeriods2 = '오후';\r\n    } else {\r\n      weatherText2 = `${arr[1].dt_day !== arr[0].dt_day ? ` 내일` : ``} 오후 ${arr[1].dt_hours -\r\n        12}시 ~`;\r\n      twoPeriods2 = '오후';\r\n    }\r\n    if (arr[2].dt_hours === 0) {\r\n      weatherText3 = ` 내일 오전 12시`;\r\n    } else if (arr[2].dt_hours < 12) {\r\n      weatherText3 = `${arr[2].dt_day !== arr[1].dt_day ? ` 내일` : ``} ${\r\n        twoPeriods2 === '오전' ? `` : ` 오전`\r\n      } ${arr[2].dt_hours}시`;\r\n    } else if (arr[2].dt_hours === 12) {\r\n      weatherText3 = `${arr[2].dt_day !== arr[1].dt_day ? ` 내일` : ``} 오후 ${arr[2].dt_hours}시`;\r\n    } else {\r\n      weatherText3 = `${arr[2].dt_day !== arr[1].dt_day ? ` 내일` : ``} ${\r\n        twoPeriods2 === '오후' ? `` : ` 오후`\r\n      } ${arr[2].dt_hours - 12}시`;\r\n    }\r\n    if (arr[0].weatherType === arr[2].weatherType) {\r\n      return `${weatherText1},${weatherText2}${weatherText3} ${WeatherTypeText(\r\n        arr[1].weatherType\r\n      )}`;\r\n    } else {\r\n      return `${weatherText1},${weatherText2}${weatherText3} ${WeatherTypeText(\r\n        arr[1].weatherType\r\n      )}, 이후 ${WeatherTypeText(arr[2].weatherType)}`;\r\n    }\r\n  } else {\r\n    const weatherTime = arr.map((value, index) => {\r\n      if (value.dt_hours === 0) {\r\n        return { twoPeriods: '오전', day: value.dt_day, hours: 12 };\r\n      } else if (value.dt_hours < 12) {\r\n        return { twoPeriods: '오전', day: value.dt_day, hours: value.dt_hours };\r\n      } else if (value.dt_hours === 12) {\r\n        return { twoPeriods: '오후', day: value.dt_day, hours: 12 };\r\n      } else {\r\n        return { twoPeriods: '오후', day: value.dt_day, hours: value.dt_hours - 12 };\r\n      }\r\n    });\r\n\r\n    return arr\r\n      .map((value, index) => {\r\n        if (index === 0) {\r\n          return WeatherTypeText(value.weatherType);\r\n        } else if (index < weatherTime.length - 1) {\r\n          if (value.dt_day !== weatherTime[index - 1].day) {\r\n            return ` 내일 ${weatherTime[index].twoPeriods} ${weatherTime[index].hours}시 ~ ${\r\n              weatherTime[index].day === weatherTime[index + 1].day\r\n                ? `${\r\n                    weatherTime[index].twoPeriods === weatherTime[index + 1].twoPeriods\r\n                      ? ``\r\n                      : `${weatherTime[index + 1].twoPeriods}`\r\n                  }`\r\n                : `${weatherTime[index + 1].twoPeriods}`\r\n            } ${weatherTime[index + 1].hours}시 사이 ${WeatherTypeText(value.weatherType)}`;\r\n          } else {\r\n            return ` ${weatherTime[index].twoPeriods} ${weatherTime[index].hours}시 ~ ${\r\n              weatherTime[index].day === weatherTime[index + 1].day\r\n                ? `${\r\n                    weatherTime[index].twoPeriods === weatherTime[index + 1].twoPeriods\r\n                      ? ``\r\n                      : `${weatherTime[index + 1].twoPeriods}`\r\n                  }`\r\n                : `내일 ${weatherTime[index + 1].twoPeriods}`\r\n            } ${weatherTime[index + 1].hours}시 사이 ${WeatherTypeText(value.weatherType)}`;\r\n          }\r\n        } else {\r\n          return ` 이후 ${WeatherTypeText(value.weatherType)}`;\r\n        }\r\n      })\r\n      .toString();\r\n  }\r\n};\r\n\r\nconst ForecastNext24 = ({ forecast, sunrise, sunset }) => {\r\n  const next24Info = forecast.reduce(forecastReducer, []);\r\n  const style = WeatherTypeColorWithForecast(next24Info);\r\n  const bgColor = {\r\n    background: style.bgColor,\r\n    color: style.textColor\r\n  };\r\n\r\n  return (\r\n    <div className='forecast_card_next24' style={bgColor}>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_next24_topcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n      <div className='forecast_card_next24_left'>\r\n        <IconContext.Provider value={{ size: '3.5em' }}>\r\n          <WeatherTypeIconWithForecast array={next24Info} />\r\n        </IconContext.Provider>\r\n      </div>\r\n      <div className='forecast_card_next24_right'>\r\n        <p className='tomorrowTimeTitle'>다음 24시간</p>\r\n        <p className='tomorrowWeatherTitle'>{next24Textloop(next24Info)}</p>\r\n      </div>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_next24_bottomcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastNext24;\r\n","import React from 'react';\r\n\r\nimport {\r\n  WeatherTypeColorWithForecast,\r\n  WeatherTypeIconWithForecast,\r\n  WeatherTypeText\r\n} from '../functions/changeWeatherData';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaCircle } from 'react-icons/fa';\r\n\r\nimport './Forecast4dayscard.scss';\r\n\r\n// 다음 24시간의 날씨 변화를 감지해서 날씨가 바뀔 때만 array 에 저장\r\nconst forecastReducer = (accumulator, value, index, array) => {\r\n  if (accumulator[0] === undefined) {\r\n    accumulator.push(value);\r\n  } else if (accumulator[accumulator.length - 1].weatherType !== value.weatherType) {\r\n    accumulator.push(value);\r\n  }\r\n  return accumulator;\r\n};\r\n\r\n// 24시간동안 감지된 날씨 변화를 텍스트로 바꾸기\r\nconst ForecastTextloop = arr => {\r\n  if (arr.length === 1) {\r\n    return WeatherTypeText(arr[0].weatherType);\r\n  } else if (arr.length === 2) {\r\n    return arr\r\n      .map((value, index) => {\r\n        if (index === 0) {\r\n          return WeatherTypeText(value.weatherType);\r\n        } else {\r\n          if (value.dt_hours === 0) {\r\n            return ` 내일 오전 12시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          } else if (value.dt_hours < 12) {\r\n            return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} 오전 ${\r\n              value.dt_hours\r\n            }시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          } else if (value.dt_hours === 12) {\r\n            return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} 오후 ${\r\n              value.dt_hours\r\n            }시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          } else {\r\n            return `${value.dt_day !== arr[index - 1].dt_day ? ` 내일` : ``} 오후 ${value.dt_hours -\r\n              12}시부터 ${WeatherTypeText(value.weatherType)}`;\r\n          }\r\n        }\r\n      })\r\n      .toString();\r\n  } else if (arr.length === 3) {\r\n    const weatherText1 = WeatherTypeText(arr[0].weatherType);\r\n    let weatherText2, weatherText3, twoPeriods2;\r\n    if (arr[1].dt_hours === 0) {\r\n      weatherText2 = ` 내일 오전 12시 ~`;\r\n      twoPeriods2 = '오전';\r\n    } else if (arr[1].dt_hours < 12) {\r\n      weatherText2 = `${arr[1].dt_day !== arr[0].dt_day ? ` 내일` : ``} 오전 ${\r\n        arr[1].dt_hours\r\n      }시 ~`;\r\n      twoPeriods2 = '오전';\r\n    } else if (arr[1].dt_hours === 12) {\r\n      weatherText2 = `${arr[1].dt_day !== arr[0].dt_day ? ` 내일` : ``} 오후 ${\r\n        arr[1].dt_hours\r\n      }시 ~`;\r\n      twoPeriods2 = '오후';\r\n    } else {\r\n      weatherText2 = `${arr[1].dt_day !== arr[0].dt_day ? ` 내일` : ``} 오후 ${arr[1].dt_hours -\r\n        12}시 ~`;\r\n      twoPeriods2 = '오후';\r\n    }\r\n    if (arr[2].dt_hours === 0) {\r\n      weatherText3 = ` 내일 오전 12시`;\r\n    } else if (arr[2].dt_hours < 12) {\r\n      weatherText3 = `${arr[2].dt_day !== arr[1].dt_day ? ` 내일` : ``} ${\r\n        twoPeriods2 === '오전' ? `` : ` 오전`\r\n      } ${arr[2].dt_hours}시`;\r\n    } else if (arr[2].dt_hours === 12) {\r\n      weatherText3 = `${arr[2].dt_day !== arr[1].dt_day ? ` 내일` : ``} 오후 ${arr[2].dt_hours}시`;\r\n    } else {\r\n      weatherText3 = `${arr[2].dt_day !== arr[1].dt_day ? ` 내일` : ``} ${\r\n        twoPeriods2 === '오후' ? `` : ` 오후`\r\n      } ${arr[2].dt_hours - 12}시`;\r\n    }\r\n    if (arr[0].weatherType === arr[2].weatherType) {\r\n      return `${weatherText1},${weatherText2}${weatherText3} ${WeatherTypeText(\r\n        arr[1].weatherType\r\n      )}`;\r\n    } else {\r\n      return `${weatherText1},${weatherText2}${weatherText3} ${WeatherTypeText(\r\n        arr[1].weatherType\r\n      )}, 이후 ${WeatherTypeText(arr[2].weatherType)}`;\r\n    }\r\n  } else {\r\n    const weatherTime = arr.map((value, index) => {\r\n      if (value.dt_hours === 0) {\r\n        return { twoPeriods: '오전', day: value.dt_day, hours: 12 };\r\n      } else if (value.dt_hours < 12) {\r\n        return { twoPeriods: '오전', day: value.dt_day, hours: value.dt_hours };\r\n      } else if (value.dt_hours === 12) {\r\n        return { twoPeriods: '오후', day: value.dt_day, hours: 12 };\r\n      } else {\r\n        return { twoPeriods: '오후', day: value.dt_day, hours: value.dt_hours - 12 };\r\n      }\r\n    });\r\n\r\n    return arr\r\n      .map((value, index) => {\r\n        if (index === 0) {\r\n          return WeatherTypeText(value.weatherType);\r\n        } else if (index < weatherTime.length - 1) {\r\n          if (value.dt_day !== weatherTime[index - 1].day) {\r\n            return ` 내일 ${weatherTime[index].twoPeriods} ${weatherTime[index].hours}시 ~ ${\r\n              weatherTime[index].day === weatherTime[index + 1].day\r\n                ? `${\r\n                    weatherTime[index].twoPeriods === weatherTime[index + 1].twoPeriods\r\n                      ? ``\r\n                      : `${weatherTime[index + 1].twoPeriods}`\r\n                  }`\r\n                : `${weatherTime[index + 1].twoPeriods}`\r\n            } ${weatherTime[index + 1].hours}시 사이 ${WeatherTypeText(value.weatherType)}`;\r\n          } else {\r\n            return ` ${weatherTime[index].twoPeriods} ${weatherTime[index].hours}시 ~ ${\r\n              weatherTime[index].day === weatherTime[index + 1].day\r\n                ? `${\r\n                    weatherTime[index].twoPeriods === weatherTime[index + 1].twoPeriods\r\n                      ? ``\r\n                      : `${weatherTime[index + 1].twoPeriods}`\r\n                  }`\r\n                : `내일 ${weatherTime[index + 1].twoPeriods}`\r\n            } ${weatherTime[index + 1].hours}시 사이 ${WeatherTypeText(value.weatherType)}`;\r\n          }\r\n        } else {\r\n          return ` 이후 ${WeatherTypeText(value.weatherType)}`;\r\n        }\r\n      })\r\n      .toString();\r\n  }\r\n};\r\n\r\n// 가장 낮은 온도와 가장 높은 온도 뽑아내기\r\nconst tempReducer = (accumulator, obj, index, array) => {\r\n  if (accumulator[0] === undefined) {\r\n    accumulator[0] = obj.temp;\r\n    accumulator[1] = obj.temp;\r\n  } else if (accumulator[0] > obj.temp) {\r\n    accumulator[0] = obj.temp;\r\n  } else if (accumulator[1] < obj.temp) {\r\n    accumulator[1] = obj.temp;\r\n  }\r\n  return accumulator;\r\n};\r\n\r\nconst Forecast4dayscard = ({ forecast, today }) => {\r\n  console.log('에러확인 여기 몇개나 있어?', forecast);\r\n  // 넘어온 날씨 예보 정보를 날짜별로 추리기\r\n  let forecast_classifi = [];\r\n  for (let i = 1; i < 5; i++) {\r\n    const lastday = new Date(today.getYear(), today.getMonth(), 0).getDate();\r\n    let dayCheck;\r\n    const dayCount = today.getDate() + i;\r\n    if (dayCount > lastday) {\r\n      dayCheck = dayCount - lastday;\r\n    } else {\r\n      dayCheck = dayCount;\r\n    }\r\n    forecast_classifi.push(\r\n      forecast.filter(obj => {\r\n        return obj.dt_day === dayCheck;\r\n      })\r\n    );\r\n  }\r\n\r\n  const forecast_textInfo = forecast_classifi.map(arr => {\r\n    return arr.reduce(forecastReducer, []);\r\n  });\r\n\r\n  const forecast_tempInfo = forecast_classifi.map(arr => {\r\n    return arr.reduce(tempReducer, []);\r\n  });\r\n\r\n  // 각 날짜별 색 설정\r\n  let bgColor = [];\r\n  for (const arr of forecast_classifi) {\r\n    const style = WeatherTypeColorWithForecast(arr);\r\n    bgColor.push({\r\n      background: style.bgColor,\r\n      color: style.textColor,\r\n      boxShadow: style.shadow\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className='forecast_card_4days'>\r\n      <IconContext.Provider\r\n        value={{ color: '#fdfdfd', className: 'forecast_card_4days_topcircle' }}\r\n      >\r\n        <FaCircle />\r\n      </IconContext.Provider>\r\n      <div className='forecast_card_4days_dayTop' style={bgColor[0]}>\r\n        <div className='forecast_card_4days_dayTop_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[0]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_dayTop_center'>\r\n          <p className='forecast_card_4days_dayTop_center_timeTitle'>\r\n            내일 ({forecast_classifi[0][0].dt_day}일)\r\n          </p>\r\n          <p className='forecast_card_4days_dayTop_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[0])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_dayTop_right'>\r\n          <p className='forecast_card_4days_dayTop_right_tempTitle'>\r\n            {forecast_tempInfo[0][0]}˚| {forecast_tempInfo[0][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_4days_day' style={bgColor[1]}>\r\n        <div className='forecast_card_4days_day_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[1]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_day_center'>\r\n          <p className='forecast_card_4days_day_center_timeTitle'>\r\n            모레({forecast_classifi[1][0].dt_day}일)\r\n          </p>\r\n          <p className='forecast_card_4days_day_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[1])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_day_right'>\r\n          <p className='forecast_card_4days_day_right_tempTitle'>\r\n            {forecast_tempInfo[1][0]}˚| {forecast_tempInfo[1][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_4days_day' style={bgColor[2]}>\r\n        <div className='forecast_card_4days_day_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[2]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_day_center'>\r\n          <p className='forecast_card_4days_day_center_timeTitle'>\r\n            {forecast_textInfo[2][0].dt_day}일\r\n          </p>\r\n          <p className='forecast_card_4days_day_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[2])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_day_right'>\r\n          <p className='forecast_card_4days_day_right_tempTitle'>\r\n            {forecast_tempInfo[2][0]}˚| {forecast_tempInfo[2][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className='forecast_card_4days_dayBottom' style={bgColor[3]}>\r\n        <div className='forecast_card_4days_dayBottom_left'>\r\n          <IconContext.Provider value={{ size: '3.5em' }}>\r\n            <WeatherTypeIconWithForecast array={forecast_classifi[3]} />\r\n          </IconContext.Provider>\r\n        </div>\r\n        <div className='forecast_card_4days_dayBottom_center'>\r\n          <p className='forecast_card_4days_dayBottom_center_timeTitle'>\r\n            {forecast_classifi[3][0].dt_day}일\r\n          </p>\r\n          <p className='forecast_card_4days_dayBottom_center_weatherTitle'>\r\n            {ForecastTextloop(forecast_textInfo[3])}\r\n          </p>\r\n        </div>\r\n        <div className='forecast_card_4days_dayBottom_right'>\r\n          <p className='forecast_card_4days_dayBottom_right_tempTitle'>\r\n            {forecast_tempInfo[3][0]}˚| {forecast_tempInfo[3][1]}˚&nbsp;\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast4dayscard;\r\n","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst legendOpts = {\r\n  display: true,\r\n  position: 'top',\r\n  fullWidth: true,\r\n  labels: {\r\n    fontColor: '#f1f1f1'\r\n  }\r\n};\r\n\r\nexport default class ForecastChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('데이터 확인', this.props);\r\n    this.state = {\r\n      data: {\r\n        datasets: [\r\n          {\r\n            type: 'bar',\r\n            label: '강수량',\r\n            data: this.props.forecast.map(obj => {\r\n              return obj.rain;\r\n            }),\r\n            fill: false,\r\n            backgroundColor: '#457AD1',\r\n            borderColor: '#457AD1',\r\n            hoverBackgroundColor: '#457AD1',\r\n            hoverBorderColor: '#457AD1',\r\n            yAxisID: 'y-axis-2',\r\n            datalabels: {\r\n              display: true,\r\n              align: 'top',\r\n              anchor: 'end',\r\n              backgroundColor: '#457AD1',\r\n              borderColor: '#457AD1',\r\n              borderRadius: 4,\r\n              borderWidth: 2,\r\n              color: '#f1f1f1'\r\n            }\r\n          },\r\n          {\r\n            type: 'line',\r\n            label: '기온',\r\n            data: this.props.forecast.map(obj => {\r\n              return obj.temp;\r\n            }),\r\n            fill: false,\r\n            borderColor: '#f8bc25',\r\n            backgroundColor: '#f8bc25',\r\n            pointBorderColor: '#f8bc25',\r\n            pointBackgroundColor: '#f8bc25',\r\n            pointHoverBackgroundColor: '#f8bc25',\r\n            pointHoverBorderColor: '#f8bc25',\r\n            yAxisID: 'y-axis-1',\r\n            datalabels: {\r\n              display: true,\r\n              align: 'top',\r\n              anchor: 'end',\r\n              backgroundColor: '#f8bc25',\r\n              borderColor: '#f8bc25',\r\n              borderRadius: 4,\r\n              borderWidth: 2,\r\n              color: '#333'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n\r\n        elements: {\r\n          line: {\r\n            fill: false\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              ticks: {\r\n                fontColor: '#f1f1f1',\r\n                fontSize: '16'\r\n              },\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              labels: this.props.forecast.map(obj => {\r\n                if (obj.dt_hours === 0) {\r\n                  return `오전 12시`;\r\n                } else if (obj.dt_hours < 12) {\r\n                  return `오전 ${obj.dt_hours}시`;\r\n                } else if (obj.dt_hours === 12) {\r\n                  return `오후 ${obj.dt_hours}시`;\r\n                } else {\r\n                  return `오후 ${obj.dt_hours - 12}시`;\r\n                }\r\n              })\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              type: 'linear',\r\n              display: true,\r\n              position: 'left',\r\n              id: 'y-axis-1',\r\n              ticks: {\r\n                fontColor: '#f1f1f1',\r\n                fontSize: '16'\r\n              },\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              labels: {\r\n                show: true\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                fontColor: '#f1f1f1',\r\n                fontSize: 16,\r\n                labelString: '기온'\r\n              }\r\n            },\r\n            {\r\n              type: 'linear',\r\n              display: false,\r\n              position: 'right',\r\n              id: 'y-axis-2',\r\n              ticks: {\r\n                suggestedMin: 50,\r\n                suggestedMax: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    };\r\n  }\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div className='forecast_chart'>\r\n        <h2 style={{ color: '#f1f1f1', textAlign: 'center' }}>다음 24시간 기온 및 강수량</h2>\r\n        <Bar data={state.data} options={state.options} legend={legendOpts} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// forecast.js 현재 날씨 정보 가져오기\r\nexport const _getForecastNowInfo = async (lat, lon) => {\r\n  const weatherNow = await _getWeatherNow(lat, lon);\r\n  // 주소의 경우 한국이면 다음 지도 사용\r\n  // 아닌 경우 날씨 API 에서 제공하는 이름 그대로 사용\r\n  let address = null;\r\n  if (lat >= 33 && lat <= 43 && lon >= 124 && lon <= 132) {\r\n    address = await _getAddr(lat, lon);\r\n  } else {\r\n    address = weatherNow.name;\r\n  }\r\n  return {\r\n    address: address,\r\n    weatherType: _changeWCode(weatherNow.weather[0].id),\r\n    temp: Math.floor(weatherNow.main.temp),\r\n    humidity: weatherNow.main.humidity,\r\n    windSpeed: weatherNow.wind.speed,\r\n    windDeg: weatherNow.wind.deg,\r\n    // 일출, 일몰 데이터의 경우 초 단위 데이터가 들어옴\r\n    // Date.now() 는 단위가 밀리초여서 비교가 불가능\r\n    // *1000 을 통해 밀리초로 변경\r\n    sunrise: weatherNow.sys.sunrise * 1000,\r\n    sunset: weatherNow.sys.sunset * 1000,\r\n    rain: weatherNow.rain\r\n  };\r\n};\r\n\r\nexport const _getDateString = date => {\r\n  const dateText = date.toLocaleString('ko-KR');\r\n  return dateText.length === 23 ? dateText.substr(0, 20) : dateText.substr(0, 21);\r\n};\r\n\r\n// forecast.js 미래 날씨 예측 정보 가저오기\r\nexport const _getForecastNext5Info = async (lat, lon) => {\r\n  const weatherNext5 = await _getWeatherNext5(lat, lon);\r\n  const list = weatherNext5.list.map(obj => {\r\n    const date = new Date(obj.dt * 1000);\r\n    return {\r\n      dt: obj.dt * 1000,\r\n      dt_month: date.getMonth() + 1,\r\n      dt_day: date.getDate(),\r\n      dt_hours: date.getHours(),\r\n      weatherType: _changeWCode(obj.weather[0].id),\r\n      temp: Math.floor(obj.main.temp),\r\n      rain: obj.rain === undefined ? 0 : obj.rain['3h']\r\n    };\r\n  });\r\n  return list;\r\n};\r\n\r\n// 메인 페이지 현재 날씨 정보 가져오기\r\nexport const _getCardLocaInfo = async (lat, lon) => {\r\n  const weatherNow = await _getWeatherNow(lat, lon);\r\n  let address = null;\r\n  if (lat >= 33 && lat <= 43 && lon >= 124 && lon <= 132) {\r\n    address = await _getAddr(lat, lon);\r\n  } else {\r\n    address = weatherNow.name;\r\n  }\r\n  return {\r\n    address: address,\r\n    temp: Math.floor(weatherNow.main.temp),\r\n    weatherType: _changeWCode(weatherNow.weather[0].id),\r\n    sunrise: weatherNow.sys.sunrise * 1000,\r\n    sunset: weatherNow.sys.sunset * 1000\r\n  };\r\n};\r\n\r\n// weather type code 를 text 로 변경\r\nconst _changeWCode = id => {\r\n  if (id >= 200 && id < 300) {\r\n    return 'Thunderstorm';\r\n  } else if (id >= 300 && id < 400) {\r\n    return 'Drizzle';\r\n  } else if (id >= 500 && id < 600) {\r\n    return 'Rain';\r\n  } else if (id >= 600 && id < 700) {\r\n    return 'Snow';\r\n  } else if (id >= 700 && id < 800) {\r\n    return 'Atmosphere';\r\n  } else if (id === 800) {\r\n    return 'Clear';\r\n  } else if (id > 800 && id < 900) {\r\n    return 'Clouds';\r\n  } else {\r\n    throw new Error('날씨 코드가 이상해!');\r\n  }\r\n};\r\n// 좌표 위치\r\nconst _getAddr = async (lat, lon) => {\r\n  const address = await fetch(\r\n    `https://dapi.kakao.com/v2/local/geo/coord2regioncode.json?x=${lon}&y=${lat}`,\r\n    {\r\n      headers: {\r\n        Authorization: `KakaoAK ${process.env.REACT_APP_KAKAO_API_KEY}`\r\n      }\r\n    }\r\n  )\r\n    .then(response => response.json())\r\n    .then(json => json.documents[0].address_name);\r\n  return address;\r\n};\r\n// 현재 날씨\r\nconst _getWeatherNow = async (lat, lon) => {\r\n  const weather = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${\r\n      process.env.REACT_APP_WEATHER_API_KEY\r\n    }&units=metric`\r\n  ).then(response => response.json());\r\n  return weather;\r\n};\r\n\r\n// 미래 5일 날씨 예보\r\nconst _getWeatherNext5 = async (lat, lon) => {\r\n  const weather = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&APPID=${\r\n      process.env.REACT_APP_WEATHER_API_KEY\r\n    }&units=metric`\r\n  ).then(response => response.json());\r\n  return weather;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\n// NavLink 사용\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// 컴포넌트 불러오기\r\nimport { MainHeader, MainPlacesCard, MainErrorCard } from '../components';\r\n\r\nimport './Home.scss';\r\n// weather API 및 주소 API 에서 가공된 데이터 가져오기\r\nimport { _getCardLocaInfo, _getDateString } from '../functions/getData';\r\n\r\nconst getNowDate = new Date();\r\nconst coords = [\r\n  {\r\n    lon: 127,\r\n    lat: 37.583328,\r\n    address: '서울'\r\n  },\r\n  {\r\n    lon: 126.416107,\r\n    lat: 37.450001,\r\n    address: '인천'\r\n  },\r\n  {\r\n    lon: 129.050003,\r\n    lat: 35.133331,\r\n    address: '부산'\r\n  },\r\n  {\r\n    lon: 128.550003,\r\n    lat: 35.799999,\r\n    address: '대구'\r\n  },\r\n  {\r\n    lon: 127.416672,\r\n    lat: 36.333328,\r\n    address: '대전'\r\n  },\r\n  {\r\n    lon: 126.916672,\r\n    lat: 35.166672,\r\n    address: '광주'\r\n  },\r\n  {\r\n    lon: 129.266663,\r\n    lat: 35.566669,\r\n    address: '울산'\r\n  },\r\n  {\r\n    lon: 126.521942,\r\n    lat: 33.50972,\r\n    address: '제주'\r\n  }\r\n];\r\nconst cardlist = arr => {\r\n  const listItems = arr.map(obj => {\r\n    return (\r\n      <NavLink key={`${obj.lat}_${obj.lon}`} to={`forecast/${obj.lat}/${obj.lon}`} className='item'>\r\n        <MainPlacesCard\r\n          key={`${obj.lat}_${obj.lon}`}\r\n          locationTitle={obj.address}\r\n          locationSub={obj.subaddress}\r\n          weatherType={obj.type}\r\n          temperature={obj.temp}\r\n          sunrise={obj.sunrise}\r\n          sunset={obj.sunset}\r\n        />\r\n      </NavLink>\r\n    );\r\n  });\r\n  return <div className='cardList'>{listItems}</div>;\r\n};\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    isLoaded: false,\r\n    time: _getDateString(getNowDate),\r\n    error: null,\r\n    card: [],\r\n    cardCount: 9\r\n  };\r\n\r\n  componentDidMount() {\r\n    // 현재 위치(좌표) 확인해서 API 에서 가공된 데이터 가져오기\r\n    navigator.geolocation.getCurrentPosition(\r\n      async position => {\r\n        for (let index = 0; index < 9; index++) {\r\n          let obj = null;\r\n          if (index === 0) {\r\n            obj = await _getCardLocaInfo(position.coords.latitude, position.coords.longitude);\r\n            this.setState({\r\n              card: [\r\n                {\r\n                  lat: position.coords.latitude,\r\n                  lon: position.coords.longitude,\r\n                  address: obj.address,\r\n                  subaddress: '현재 위치',\r\n                  temp: obj.temp,\r\n                  type: obj.weatherType,\r\n                  sunrise: obj.sunrise,\r\n                  sunset: obj.sunset\r\n                }\r\n              ]\r\n            });\r\n          } else if (index === 8) {\r\n            obj = await _getCardLocaInfo(coords[index - 1].lat, coords[index - 1].lon);\r\n            this.setState({\r\n              card: [\r\n                ...this.state.card,\r\n                {\r\n                  lat: coords[index - 1].lat,\r\n                  lon: coords[index - 1].lon,\r\n                  address: coords[index - 1].address,\r\n                  subaddress: '대한민국',\r\n                  temp: obj.temp,\r\n                  type: obj.weatherType,\r\n                  sunrise: obj.sunrise,\r\n                  sunset: obj.sunset\r\n                }\r\n              ],\r\n              isLoaded: true\r\n            });\r\n          } else {\r\n            obj = await _getCardLocaInfo(coords[index - 1].lat, coords[index - 1].lon);\r\n            this.setState({\r\n              card: [\r\n                ...this.state.card,\r\n                {\r\n                  lat: coords[index - 1].lat,\r\n                  lon: coords[index - 1].lon,\r\n                  address: coords[index - 1].address,\r\n                  subaddress: '대한민국',\r\n                  temp: obj.temp,\r\n                  type: obj.weatherType,\r\n                  sunrise: obj.sunrise,\r\n                  sunset: obj.sunset\r\n                }\r\n              ]\r\n            });\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        this.setState({\r\n          error: error\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        {state.isLoaded ? (\r\n          <div className='list'>\r\n            <MainHeader nowTime={state.time} />\r\n            {cardlist(state.card)}\r\n            {/* 카드 추가 기능 - 구현 시 사용\r\n        <div className='list_card_add'>\r\n        <IconContext.Provider value={{ size: '3em', color: 'white' }}>\r\n            <FaPlusSquare />\r\n            </IconContext.Provider>\r\n        </div> \r\n      */}\r\n          </div>\r\n        ) : state.error ? (\r\n          <div className='list'>\r\n            <MainHeader nowTime={state.time} />\r\n            <MainErrorCard />\r\n          </div>\r\n        ) : (\r\n          <div className='list'>\r\n            <MainHeader nowTime={state.time} />\r\n            <p style={{ textAlign: 'center', color: 'white', margin: 'auto' }}>로딩중...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './Forecast.scss';\r\nimport { _getForecastNowInfo, _getDateString, _getForecastNext5Info } from '../functions/getData';\r\n\r\nimport {\r\n  ForecastHeader,\r\n  ForecastNowcard,\r\n  ForecastLinecard,\r\n  ForecastNext24,\r\n  Forecast4dayscard,\r\n  ForecastChart\r\n} from '../components';\r\n\r\nconst getWeatherData = async (lat, lon) => {\r\n  const nowWeather = await _getForecastNowInfo(lat, lon);\r\n  const nextWeather = await _getForecastNext5Info(lat, lon);\r\n  return {\r\n    nowWeather: {\r\n      address: nowWeather.address,\r\n      weatherType: nowWeather.weatherType,\r\n      temp: nowWeather.temp,\r\n      humidity: nowWeather.humidity,\r\n      windSpeed: nowWeather.windSpeed,\r\n      windDeg: nowWeather.windDeg,\r\n      sunrise: nowWeather.sunrise,\r\n      sunset: nowWeather.sunset,\r\n      rain: nowWeather.rain\r\n    },\r\n    nextWeather\r\n  };\r\n};\r\n\r\nconst getNowDate = new Date();\r\nconst year = getNowDate.getFullYear();\r\nconst month = getNowDate.getMonth();\r\nconst day = getNowDate.getDate() + 1;\r\nconst hours = getNowDate.getHours();\r\nconst minute = getNowDate.getMinutes();\r\nconst Nextday = new Date(year, month, day, hours, minute);\r\nexport default class Forecast extends Component {\r\n  state = {\r\n    isLoaded: false,\r\n    time: _getDateString(getNowDate),\r\n    error: null,\r\n    nowcard: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    getWeatherData(this.props.match.params.lat, this.props.match.params.lon).then(res =>\r\n      this.setState({\r\n        nowcard: res.nowWeather,\r\n        forecastcard: res.nextWeather,\r\n        isLoaded: true\r\n      })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        {state.isLoaded ? (\r\n          <div className='forecast'>\r\n            <ForecastHeader address={state.nowcard.address} nowTime={state.time} />\r\n            <ForecastNowcard\r\n              weatherType={state.nowcard.weatherType}\r\n              temp={state.nowcard.temp}\r\n              humidity={state.nowcard.humidity}\r\n              windSpeed={state.nowcard.windSpeed}\r\n              windDeg={state.nowcard.windDeg}\r\n              sunrise={state.nowcard.sunrise}\r\n              sunset={state.nowcard.sunset}\r\n              rain={state.nowcard.rain}\r\n              time={state.time}\r\n            />\r\n            <ForecastLinecard text='잠시 후' weatherType={state.forecastcard[0].weatherType} />\r\n            <ForecastNext24\r\n              forecast={state.forecastcard.filter(obj => {\r\n                return obj.dt <= Nextday;\r\n              })}\r\n              sunrise={state.nowcard.sunrise}\r\n              sunset={state.nowcard.sunset}\r\n            />\r\n            <ForecastLinecard text='다음 4일' weatherType={''} />\r\n            <Forecast4dayscard forecast={state.forecastcard} today={getNowDate} />\r\n            <ForecastChart\r\n              forecast={state.forecastcard.filter(value => {\r\n                return value.dt <= Nextday;\r\n              })}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div className='forecast'>\r\n            <ForecastHeader address='' nowTime={state.time} />\r\n            <p\r\n              style={{\r\n                textAlign: 'center',\r\n                color: 'white',\r\n                margin: 'auto',\r\n                gridArea: '2 / 1 / 3 / span2'\r\n              }}\r\n            >\r\n              로딩중...\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport MixedDataExample from '../components/ForecastChart';\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div style={{ color: 'white', margin: 'auto' }}>\r\n      <p style={{ textAlign: 'center' }}>페이지를 찾을 수 없습니다.</p>\r\n      <MixedDataExample />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { Home, Forecast, NoMatch } from '../pages';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route path='/forecast/:lat/:lon' component={Forecast} />\r\n          <Route component={NoMatch} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '../shared/App';\r\n\r\nconst Root = () => {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './client/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}